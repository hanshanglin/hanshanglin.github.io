<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>HANSAMA&#39;s bloG</title>
        <link>https://hanshanglin.space/</link>
        <description>这是 hansama 的私人博客，记录平时生活学习的所见所想，原来的文章会不断迁移过来 ;)</description>
        <generator>Hugo 0.63.2 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>hanshanglin2017@gmail.com (HAN Shanglin)</managingEditor>
        
        
            <webMaster>hanshanglin2017@gmail.com (HAN Shanglin)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Fri, 09 Jul 2021 02:18:34 +0000</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://hanshanglin.space/rss.xml" />
        
        
            <item>
                <title>如何实现一个超快读的map</title>
                <link>https://hanshanglin.space/tech/rcu/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/rcu/</guid>
                <pubDate>Tue, 22 Jun 2021 22:29:00 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>如何利用rcu的思想构造一个对读性能要求超高的map。</p>
<p>今天听了<a href="https://github.com/bytedance/sonic">sonic项目</a>的分享，收获还是很多的，JIT（Just-in-Time）的思想以及很多运行时生成函数的套路都是之前不曾接触的。 相关的笔记可能之后再整理，这一篇着重记录一下RCU的思想（Read-Copy-Update）。</p>
<h1 id="什么是rcu--cow">什么是RCU &amp; COW</h1>
<p>RCU是一个使用蛮广泛的同步机制，它的作用是尽量避免在多个线程竞争读和更新同一份数据时对数据加锁（因为加锁开销很大），最有名的应用应该是在Linux的内核中被使用，wiki上对其有一段描述：</p>
<blockquote>
<p>In computer science, read-copy-update (RCU) is a synchronization mechanism that avoids the use of lock primitives while multiple threads concurrently read and update elements that are linked through pointers and that belong to shared data structures (e.g., linked lists, trees, hash tables).</p>
</blockquote>
<p>关于该机制产生效果的描述大概可以表述为：插入和删除操作的原子性，即所有线程要么观测到旧的数据要么观测到新的数据。</p>
<blockquote>
<p>Whenever a thread is inserting or deleting elements of data structures in shared memory, all readers are guaranteed to see and traverse either the older or the new structure, therefore avoiding inconsistencies (e.g., dereferencing null pointers).</p>
</blockquote>
<p>这是一个空间换时间的操作，通过这个机制可以让所有的读线程在并发读的时候假装没有并发问题，当然写操作会变得很慢，因为需要一个复制-更新的操作。</p>
<blockquote>
<p>It is used when performance of reads is crucial and is an example of space–time tradeoff, enabling fast operations at the cost of more space. This makes all readers proceed as if there were no synchronization involved, hence they will be fast, but also making updates more difficult.</p>
</blockquote>
<h1 id="我们为什么需要rcu">我们为什么需要RCU</h1>
<h1 id="怎么实现rcu">怎么实现RCU</h1>
<p>借用sonic项目中的实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Golang" data-lang="Golang"><span class="cm">/** https://github.com/bytedance/sonic/blob/main/internal/caching/pcache.go **/</span>
<span class="cm">/** RCU Program Cache **/</span>

<span class="kd">type</span> <span class="nx">ProgramCache</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">m</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
    <span class="nx">p</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">CreateProgramCache</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span><span class="nx">ProgramCache</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">ProgramCache</span> <span class="p">{</span>
        <span class="nx">m</span><span class="p">:</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span><span class="p">{</span><span class="p">}</span><span class="p">,</span>
        <span class="nx">p</span><span class="p">:</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nf">newProgramMap</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">ProgramCache</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">vt</span> <span class="o">*</span><span class="nx">rt</span><span class="p">.</span><span class="nx">GoType</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{</span><span class="p">}</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="nx">_ProgramMap</span><span class="p">)</span><span class="p">(</span><span class="nx">atomic</span><span class="p">.</span><span class="nf">LoadPointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">self</span><span class="p">.</span><span class="nx">p</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">vt</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">ProgramCache</span><span class="p">)</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">vt</span> <span class="o">*</span><span class="nx">rt</span><span class="p">.</span><span class="nx">GoType</span><span class="p">,</span> <span class="nx">fn</span> <span class="kd">interface</span><span class="p">{</span><span class="p">}</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nf">Lock</span><span class="p">(</span><span class="p">)</span>
    <span class="nx">atomic</span><span class="p">.</span><span class="nf">StorePointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">self</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="p">(</span><span class="o">*</span><span class="nx">_ProgramMap</span><span class="p">)</span><span class="p">(</span><span class="nx">atomic</span><span class="p">.</span><span class="nf">LoadPointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">self</span><span class="p">.</span><span class="nx">p</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">vt</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span><span class="p">)</span><span class="p">)</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">(</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/rcu/">rcu</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>如何游玩y神公益服</title>
                <link>https://hanshanglin.space/life/how-to-play-minecraft-server/</link>
                <guid isPermaLink="true">https://hanshanglin.space/life/how-to-play-minecraft-server/</guid>
                <pubDate>Wed, 19 May 2021 13:06:31 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>Yan神开了工艺服,我们为他鼓掌~ 下面说明一下怎么van~</p>
<h2 id="首先加入用户群">首先加入用户群</h2>
<p>如果过期可以微信联系<code>腐竹 haozheyan_97</code>  <code>整合大大 wxid_k8k6d4i7ptbz22</code> 进群.</p>
<p>想玩什么模组, 想为服务器工艺赞助, 想抱腐竹大腿或是想要偶遇好基友都可以在群里沟通~</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519131640.png" alt="image-20210519131640084" style="zoom:40%;" /></p>
<h2 id="在littleskin注册自己的账户">在littleskin注册自己的账户</h2>
<p>为了让大家在服务器里不都是史蒂夫, 每个人都可以换自己喜欢的皮肤, 我们用littleskin登陆游戏.</p>
<p>所以大家需要先去<a href="https://littleskin.cn/">这里</a>注册账号.</p>
<p>注册完成后登陆, 会看到这样的界面</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519132849.png" alt="image-20210519132849763" style="zoom:25%;" /></p>
<p>之后点击<code>角色管理</code>-<code>添加新角色</code>,  创建一个属于自己的角色. 更多功能可以自行探索littleskin皮肤站.</p>
<h2 id="下载并开启整合包">下载并开启整合包</h2>
<p>注册完账号后, 需要安装游戏进入服务器.</p>
<p>首先需要下载整合包和启动器</p>
<p><a href="http://hk.yanhaozhe.cn/latest.zip">点击这里下载</a></p>
<p>下载并解压后可以看到这样的文件</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519133359.png" alt="image-20210519133359135" style="zoom:50%;" /></p>
<p>然后运行<code>HMCL-3.3.172.exe</code>, 这是一个启动器, 点开之后会到类似下图的界面:</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519133609.png" alt="image-20210519133609646" style="zoom:30%;" /></p>
<p>回到刚刚我们littleskin的界面, 把按钮<strong>拖动</strong>到启动器内, 将littleskin注册到我们的启动器.</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519133800.png" alt="image-20210519133800675" style="zoom:33%;" /></p>
<p>注册完成后, 点击<code>➕</code>, 填写相关信息, 账户是注册littleskin的所用邮箱, 密码是littleskin的账号密码, 之后点击确定就好.</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519134322.png" alt="image-20210519134322239" style="zoom:33%;" /></p>
<p>完成后可以看到我们刚刚创建的角色了.</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519134419.png" alt="image-20210519134419937" style="zoom:30%;" /></p>
<p>然后导入我们的整合包,这里面包含了服务器需要的模组和游戏本体.</p>
<p>点击<code>版本列表</code>-<code>安装整合包</code>-<code>从本地导入</code>, 然后选择刚刚接压出来的<code>modpack.zip</code>, 点击确定.</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519134947.png" alt="image-20210519134947587" style="zoom:33%;" /></p>
<p>之后一路点击安装, 完成后就可以看到我们已经安装好了玩游戏需要的整合, 点左上角小箭头回到开始页面. 点击启动游戏就能打开啦.</p>
<p><img src="https://typora-1258604187.cos.ap-beijing.myqcloud.com/20210519135240.png" alt="image-20210519135240621" style="zoom:33%;" /></p>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/life/">life</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/minecraft/">Minecraft</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Re0_overall</title>
                <link>https://hanshanglin.space/tech/re0_overall/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/re0_overall/</guid>
                <pubDate>Fri, 12 Mar 2021 23:48:10 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h2 id="操作系统">操作系统</h2>
<ol>
<li>
<p><strong>字符编码</strong></p>
<ol>
<li><strong>基础</strong>
<ol>
<li><strong>unicode vs ANSI</strong></li>
</ol>
</li>
<li><strong>进阶</strong>
<ol>
<li><strong>utf-8 中英文字节</strong></li>
<li><strong>为什么不用unicode</strong></li>
</ol>
</li>
</ol>
</li>
<li>
<p>线程与进程</p>
<ol>
<li>基础
<ol>
<li>进程和线程分别是什么</li>
<li>进程和线程的关系</li>
<li>程序和进程有什么关系</li>
</ol>
</li>
<li>基础+
<ol>
<li>线程同步机制</li>
<li>死锁原理</li>
<li>抢占式进程调度和进程优先级</li>
</ol>
</li>
<li>进阶
<ol>
<li>原子操作原理 怎么实现的</li>
<li>volatile是什么 解决了什么问题</li>
<li>互斥锁 信号量 临界区 循环锁的区别联系 和各自的使用场景</li>
<li>读写锁实现</li>
<li>如何设计实现一个线程池</li>
<li>动态链接与静态链接的区别</li>
</ol>
</li>
</ol>
</li>
<li>
<p>内存管理 不太懂 待补充</p>
<p><em>buddy算法和slab算法</em></p>
<ol>
<li>基础
<ol>
<li>堆栈概念</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="网络">网络</h1>
<ol>
<li>
<p>基础知识</p>
<ol>
<li>
<p>基础</p>
<ol>
<li>网络协议（7层或5层）常见网络协议负责哪一层</li>
<li>设备在哪一层工作</li>
<li>基本网络传输协议</li>
</ol>
</li>
<li>
<p>进阶</p>
<ol>
<li>
<p>protobuf协议了解</p>
<p>protobuf是一个应用层二进制协议，可以用于传输数据。横向对比thrift，但thrift有更好的rpc配套设施。</p>
</li>
<li>
<p>网络行为的串联认知 从点击浏览器到处理请求</p>
</li>
</ol>
</li>
</ol>
</li>
<li>
<p>网络层协议</p>
<ol>
<li>基础
<ol>
<li>IP v4地址</li>
<li>子网掩码在干什么</li>
<li>给定ip和子网掩码，广播地址是什么</li>
</ol>
</li>
<li>基础+
<ol>
<li>IP header（source target TTL）</li>
</ol>
</li>
<li>进阶
<ol>
<li>为什么需要ipv6</li>
<li>BGP OSPF协议原理</li>
</ol>
</li>
</ol>
</li>
<li>
<p>传输层协议</p>
<ol>
<li>基础
<ol>
<li>TCP UDP老生常谈</li>
<li>各自擅长的场景</li>
</ol>
</li>
<li>基础+
<ol>
<li>TCP建立连接与断开连接</li>
<li>TCP UDPheader</li>
</ol>
</li>
<li>进阶
<ol>
<li>什么是SYN攻击</li>
<li>TCP为什么三次握手四次挥手</li>
<li>滑动窗口</li>
<li>拥塞控制</li>
<li>慢启动</li>
</ol>
</li>
</ol>
</li>
<li>
<p>DNS</p>
<ol>
<li>基础
<ol>
<li>DNS是干什么的</li>
<li>DNS的过程是什么</li>
</ol>
</li>
<li>进阶
<ol>
<li>典型DNS记录格式</li>
<li>DNS劫持是什么， 如何防止</li>
<li>主流的公有云的DNS服务端架构（腾讯云）</li>
</ol>
</li>
</ol>
</li>
<li>
<p>应用层 <a href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html">https://hit-alibaba.github.io/interview/basic/network/HTTP.html</a></p>
<ol>
<li>基础
<ol>
<li>http协议用途 常见使用场景</li>
<li>常见应用层协议</li>
<li>http vs https</li>
<li>header中 常用的选项和用途</li>
<li>header cookie 返回码 UA HOST 域 等基本概念</li>
<li>POST vs GET</li>
<li>常见返回码含义</li>
</ol>
</li>
<li>进阶
<ol>
<li>http 2.0 vs 1.1</li>
<li>GET的幂等</li>
<li>keep alive含义</li>
<li>url编码</li>
<li>断点续传怎么实现</li>
<li>https如何协商</li>
<li>CSRF原理和防范</li>
<li>XSS原理和防范</li>
<li>中间人攻击概念和防止</li>
<li>QUIC http2 特点</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="数据库">数据库</h1>
<pre><code>1. 入门
    1. 基本查询语句
    2. 事务 索引 主key的概念
    3. join groupby 
2. 基础
    1. 数据库三个范式
    2. 数据库游标
    3. CAP概念和原理
3. 进阶
    1. 用过的数据库和特点
        1. mongoDB
        2. innoDB
        3. graphQL
        4. clickhouse
        5. Bigtable
    2. 原理和使用方法
</code></pre>
]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                    
                
            </item>
        
            <item>
                <title>辩论从入门到入土</title>
                <link>https://hanshanglin.space/life/debate/</link>
                <guid isPermaLink="true">https://hanshanglin.space/life/debate/</guid>
                <pubDate>Sat, 19 Sep 2020 15:24:16 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>co-author: 白禾诚</p>
<p>辩论是一个很复杂的事情，让我这个菜鸟给你bb两句。
关于: 辩位基本知识、政策辩需根解损、一辩稿写作、赛制各环节讲解</p>
<h2 id="基本知识">基本知识</h2>
<p>辩论就是两群人相互哔哔，哔哔的目的是说服。而对象是<strong>场下的评委</strong>而不是你的对手。你的对手是不可能被你说服的。<del>（死鸭子嘴硬）</del>
而辩论中所有的环节设计以及可能牵扯到的技巧都是在帮助你说服评委（或观众）。方法论每个人各不相同，剑宗气宗百家争鸣，但核心都是<strong>打消别人潜在的顾虑，让他们相信你（们）没有框他们</strong>。</p>
<h3 id="常见赛制及环节">常见赛制及环节</h3>
<p>常见的辩论赛制主要有较为传统的四人赛制和较为反人类的两人赛制，某些比赛中会出现一对一的赛制或三人赛制。通常，新国辩、世界杯、南审等比赛都是四人赛制，而捭阖杯则会采用两人赛制。</p>
<h3 id="四人赛制中常见的环节">四人赛制中常见的环节</h3>
<ol>
<li>立论环节：<br>
·读稿子，让场下的评委知道你们想谈论什么内容，你们的核心论点是什么，你们为什么这么想以及为什么他们应该听你们的。</li>
<li>四质询一：<br>
·  四辩起身对着对方一辩一顿毒打，目的是：<strong>框定范围</strong>，即跟对方确认你们要论证到什么程度。首先跟对方确认你们听到的的对方立场和论点、关于对方的标准和定义进一步窄化（xxx属不属于你们的这个定义的范围）、对于两边使用不一致的词汇确认统一的表达、确认双方的论证义务，最后进行简短的总结（我们是不是只要论证XXX这个东西不用担心，则我方得证 OR 我们需要解决的核心冲突是XXX对不对）。</li>
<li>二辩驳论：<br>
·关于对方的论点直接攻击及完成四质一环节没有完成的步骤。</li>
<li>对辩：<br>
·选一个三辩以外的人担当对辩的选手，两个人交替发言。基本形式为简短的回答对方的问题然后提出自己的问题。注意这个环节容易出现三种不宜的情形：自己忘记提问、发言时间太长双方时间差距太大和不断地打断对方。</li>
<li>三辩质询：<br>
·全场最没意思的环节。形式为一人提问两人回答。这个环节有两种计时方式，第一种是记总时间，而第二种是只记提问时间。从本质上没有区别，从操作上有一点点区别。总的来说就是通过提问的方式推进自己的论述（一般为逼对方承认你们的好处），或者是打击对方的论（逼对方承认他们有的地方不对劲）。</li>
<li>三辩小结：<br>
·很重要的环节，三辩需要在短时间内总结上半场发生的事情，包括你们都说了什么、他们有什么问题以及接下来要讨论什么。</li>
<li>自由辩：<br>
·四个人都可以发言的环节。双方基本形式和对辩相同，回答问题然后提出问题。对于团队协作或是大腿的粗细要求比较高的环节。切忌坐下不发言，很容易跟不上节奏导致自闭。有几个情形需要注意：1. 双方时差太大一般不是好事，代表一方没有很认真的回答问题。 2. 一直在讨论对方的问题而忽略了推进自己的论述。（辩论不是推塔游戏）</li>
<li>结辩：<br>
·最后一个人对全场的所有谈论内容进行总结，梳理内容。最后引出自己的价值。</li>
</ol>
<h3 id="各个辩位的责任">各个辩位的责任：</h3>
<p><strong>个人理解</strong></p>
<table>
<thead>
<tr>
<th>辩位</th>
<th>责任</th>
</tr>
</thead>
<tbody>
<tr>
<td>一辩</td>
<td>应该是全场对你们的论述最清楚的人，从防守上你是最强的。自由辩往往也需要比较冷静的拉扯己方二三辩的输出方向。</td>
</tr>
<tr>
<td>二辩</td>
<td>需要掌握自己的论述和对方的论述，完成驳论，通常还需要担任自由人，主要输出位置。</td>
</tr>
<tr>
<td>三辩</td>
<td>掌握良好的质询技巧和更多的临场反应，对需要解决的问题有比较清楚的把握，主要输出位置。</td>
</tr>
<tr>
<td>四辩</td>
<td>做好总结全场论述的工作，在前面三个人拉垮的时候果断地踹开他们自己开始输出。梳理全程并主要负责价值的输出。</td>
</tr>
</tbody>
</table>
<h2 id="辩题的一般分类">辩题的一般分类</h2>
<h3 id="价值辩">价值辩</h3>
<p>两方对于两种价值观的争执。比如大家应该选择乘风破浪的生活还是选择风平浪静的生活。</p>
<h3 id="政策辩">政策辩</h3>
<p>两方对于两种政策方针的争执。比如美国是否应该禁止抖音。</p>
<h4 id="需根解损">需根解损</h4>
<p>需根解损是一种分析政策辩论的方式。它其实是四个可能需要考虑，涉及到的步骤。这四个步骤其实是有逻辑顺序的，位置越靠前，同样的力度对于终结比赛的影响越大。意味着，如果我能论证出没需求，那么自然不需要讨论根解损，如果我能论证出不根属，那么自然不需要讨论解损，如果我能论证出解决不了，那么自然不需要讨论损益。现实执行出来，需求性和根属性是比较容易做出彻底切割的，但是一旦进入到解决力，乃至损益比的战场，那么你基本丧失了打死对面的可能，只能互戳窟窿然后查数。</p>
<table>
<thead>
<tr>
<th>方面</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>需</strong></td>
<td>需求性，辩题所的政策拟解决的问题在现实中是否有被解决的需求。通常可能通过该问题已被解决或该问题牵涉面过小或该问题根本不严重可以接受等方式进行削弱。值得注意的是，某些政策辩拟解决的问题并不会作为辩题背景给出，会给双方尤其是正方更多的诠释空间（神论伏笔）。</td>
</tr>
<tr>
<td>根</td>
<td>根属，讨论现状与政策解决的伤害之间的关系。比如抖音侵害了脸书的市场</td>
</tr>
<tr>
<td>解</td>
<td>解决力，辩题中拟推行的政策对拟解决问题具备多大解决力。比如每人发1000块钱对于解决贫富差距问题杯水车薪。</td>
</tr>
<tr>
<td>损</td>
<td>往往是最后需要争执的内容，这个政策带来的好处（解决伤害）和带来的损害（附加伤害和立法成本）之间的比较。</td>
</tr>
</tbody>
</table>
<h3 id="其他">其他</h3>
<p><del>施工中</del> <br>
咕咕咕</p>
<h2 id="一场比赛最少要准备什么">一场比赛最少要准备什么</h2>
<p>上场前，这些内容是最起码的。</p>
<h3 id="一辩稿">一辩稿</h3>
<p>一般由一辩负责，其他人改。阐述你的标准、定义、论点以及价值。<br>
一般来说第一段会讲述定义和标准，如果有直接解释不清楚的内容应当尝试用比较形象的例子、类比说明。<br>
第一段之后的内容一般是2-3个论点。每个论点论述的结构应当是中心句、相应的论述逻辑、适当的事实、适当的示例。如果有富裕可以加入少量的防御性内容，比如提前解释对方可能提起的问题。<br>
最后一段往往为较为简短的总结，可以引出一点点价值。<br>
在完成一辩稿的时候应当明白，稿子存在的意义是让所有人听明白你们想要表达什么，而不是将自己的观点藏起来害怕被别人问到。</p>
<h3 id="驳论稿">驳论稿</h3>
<p>一般由二辩完成，提前预设对方可能的立场，提前从你们的立论角度尝试解决这个问题。同时可能需要准备对于论点、标准和定义较为防御性的内容，用于进一步说明为什么你们的观点更加合理。</p>
<h3 id="answer-list">Answer List</h3>
<p>一般由二辩在准备驳论时顺手准备，作用是将难以解决的问题提前想好，四人在遇到这个问题的时候统一按照稿子上的思路回答，以免因为关键问题一时回答错误导致全场崩盘。</p>
<h3 id="战场稿">战场稿</h3>
<p>一般在三辩准备自己环节问题的时候完成，四人讨论后定稿。主要是讲整个论述过程拆分成很多小目标。从为什么要采用你们的标准、定义，到每个论点的每个论证过程。每个小目标准备几个最高效的问题和例子，正常的推进都按照这个稿子上的步骤来完成。</p>
<h2 id="浅入浅出的二辩">浅入浅出的二辩</h2>
<p>施工中</p>
<h2 id="浅入深出的三辩">浅入深出的三辩</h2>
<p>关于三辩，最重要的工作是将自己持方整场需要论述的逻辑整理清楚，在此基础上设计问题。在场上需要有大局观，即进行到一个环节之后，自我感觉对方哪个问题对你们论述的影响最大，哪些问题无关紧要。尝试在自己的环节解决双方最大的矛盾。</p>
<p>对于三辩专属的质询环节，最重要的事情是在上场前准备好问题。尽管不一定会用到但能帮助你更好的找到你们自己论述中比较困难的部分。<br>
准备的问题一般是成体系的，一个完整的盘问流程大概是（以攻击对方论点为例）：</p>
<ol>
<li>确认观点：即（确认一下，您方第x个论点说xxx对吧）</li>
<li>攻击：攻击往往有三种手段。<br>
a. 通过反例攻击。（大家都知道xxx，那按照你们的论述，是不是xxx？）<br>
b. 通过数据攻击。（我们查到xxx，对方却说xxx，两边的截然相反，我们的更加权威和全面。）<br>
c. 通过逻辑攻击。（有xxx就一定会xxx吗？那xxx也有xxx,但xxx就没有xxx，你们怎么解释？）</li>
<li>总结刚才发生了什么，请把评委想象成不集中注意力上课的你，你刚刚说的内容也许他们根本就没有听到，这个时候你需要总结性将刚刚的结论重复一遍。比如对方显然没办法解释xxx，因此他们的xxx显然是荒谬的。</li>
</ol>
<p>比赛前将你所有的可能要询问的问题整理成上述格式，一般在质询环节你应该可以利用适当的打断在时间内结束2-3套论述流程。</p>
<h2 id="如何认清场上的局面如何拆解对方的论述">如何认清场上的局面、如何拆解对方的论述</h2>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/life/">life</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/debate/">debate</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>2020COMP迎新比赛题解</title>
                <link>https://hanshanglin.space/tech/comp-contest-2020-solve/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/comp-contest-2020-solve/</guid>
                <pubDate>Thu, 17 Sep 2020 13:34:35 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>某世一大comp专业迎新比赛，毒瘤四题题解。排序由易到难。</p>
<ol>
<li><a href="#%E6%9C%9B%E7%9C%BC%E6%AC%B2%E7%A9%BF%E7%9A%84%E5%B9%BF%E5%91%8A%E7%89%8C">望眼欲穿的广告牌</a>  $ AC Rate &gt; 0$</li>
<li><a href="#%E6%A2%85%E5%BC%80%E4%B8%89%E5%BA%A6">梅开三度</a>  $ AC Rate = 0$</li>
<li><a href="#portal">Portal</a>  $ AC Rate = 0$</li>
<li><a href="#lets-ac-it-together">Let's AC it together</a>  $ AC Rate = 0$</li>
</ol>
<hr>
<h2 id="望眼欲穿的广告牌">望眼欲穿的广告牌</h2>
<p><a href="https://www.yanhaozhe.cn/problem/19">题目在这里</a></p>
<h3 id="考察知识">考察知识</h3>
<p>字符串，字典序，最小表示法。</p>
<h3 id="题意分析">题意分析</h3>
<p>给定一个字符串s和一个长度l，输出满足要求的（字典序）最小的长度为l的字符串。而给定的要求其实就是求一个字符串的所有<a href="https://oi-wiki.org/string/minimal-string/">循环同构</a>的字符串中最小的一个。</p>
<h3 id="题解">题解</h3>
<p>从数据范围和时限可以得知复杂度必须为$O(n)$。</p>
<h4 id="暴力">暴力</h4>
<p>暴力的做法通常为枚举两个起点，依次比较由每一个起点开始所构成的字符串的大小，最终保留下来最小的。这样的话在遇到最坏情况时复杂度为$O(n^2)$（例如bbbbba）。</p>
<h4 id="最小表示法">最小表示法</h4>
<p>这道题可以有$O(n)$的做法，即为最小表示法。具体算法信息建议直接阅读<a href="https://oi-wiki.org/string/minimal-string/">oi-wiki对于最小表示法的详解</a>。这应该属于算法竞赛中普及组的知识范围，对于没有学习过算法知识的人，应该可以在半小时内学会这个方法。</p>
<h3 id="相关知识及拓展阅读">相关知识及拓展阅读</h3>
<p>建议了解相关字符串知识，不为竞赛准备仅丰富知识的话建议了解并学习以下算法及数据结构知识: 什么是字典序、KMP算法、字典树、AC自动机、马拉车算法。 (排名分先后)</p>
<h3 id="一个大概可行的程序">一个大概可行的程序</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#</span><span class="cp">include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kr">inline</span> <span class="n">string</span> <span class="nf">read</span><span class="p">(</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">st1</span> <span class="o">=</span> <span class="sa"></span><span class="s">&#34;</span><span class="s">&#34;</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="p">(</span><span class="n">ch</span> <span class="o">&gt;</span><span class="o">=</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">a</span><span class="sc">&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="p">(</span><span class="n">ch</span> <span class="o">&lt;</span><span class="o">=</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">z</span><span class="sc">&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">)</span> 
        <span class="n">ch</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="p">(</span><span class="n">ch</span> <span class="o">&gt;</span><span class="o">=</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">a</span><span class="sc">&#39;</span><span class="p">)</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="p">(</span><span class="n">ch</span> <span class="o">&lt;</span><span class="o">=</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">z</span><span class="sc">&#39;</span><span class="p">)</span><span class="p">)</span>
        <span class="n">st1</span> <span class="o">+</span><span class="o">=</span> <span class="n">ch</span><span class="p">,</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">st1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">l</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">;</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span><span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="n">k</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span><span class="p">)</span> <span class="n">k</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">s</span><span class="p">[</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">[</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="n">k</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span> <span class="o">?</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span><span class="o">=</span> <span class="n">j</span><span class="p">)</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">l1</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span> <span class="o">&gt;</span><span class="o">=</span> <span class="n">l</span> <span class="o">?</span> <span class="nl">l</span> <span class="p">:</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="n">l1</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">l1</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">l2</span><span class="p">)</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="o">&lt;</span><span class="n">l</span><span class="p">)</span> <span class="n">ans</span><span class="o">+</span><span class="o">=</span><span class="n">s</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;</span><span class="o">&lt;</span> <span class="n">ans</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">l</span><span class="p">)</span> <span class="o">&lt;</span><span class="o">&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>


</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="梅开三度">梅开三度</h2>
<p><a href="https://www.yanhaozhe.cn/problem/14">题目在这里</a><br>
<strong>特别说明：这个题目原版是不够严谨的，应当说明数据充分随机或更改为每种属性数值都不相同。</strong></p>
<h3 id="考察知识-1">考察知识</h3>
<p>前缀和、二分查找、位运算、区间查询。</p>
<h3 id="题意分析-1">题意分析</h3>
<p>给定k个物品，每个物品有三个属性，相邻的两个可以融合，融合后属性计算方式分别为三种位运算操作(与、或、异或)。求满足要求的最小值。一个小坑，数的数目是o而不是0，即<code>0</code> <code>6</code> <code>9</code>中各有一个，<code>8</code>中有两个。融合相邻两个且不限融合次数的含义就是对某一个区间融合。</p>
<h3 id="题解-1">题解</h3>
<h4 id="暴力-1">暴力</h4>
<p>这个题暴力的做法为对每一个可能的区间求区间异或和、区间与和及区间<code>AND</code>和。然后暴力的计算出最小值，复杂度为$O(n^2)$。显然会超时。</p>
<h4 id="利用性质进行二分查找">利用性质进行二分查找</h4>
<p>这道题可以有$O(nlgn)$的做法。</p>
<p>首先对于区间异或的值，显然可以通过前缀和的方式查询。对于区间<code>&amp;</code> 和区间<code>|</code>的查询，直觉可以想到线段树，但考虑到线段树写起来比较麻烦以及复杂度不够优秀，这里采用拆位和前缀和来解决查询问题。思路即为使用<code>prefix[a][b]</code>记录前a个数字二进制表示下第i位的1的数目。当查询时，如果一个区间1的数目大于0则说明区间<code>|</code>和中这一位为1,如果一个区间1的数目小于区间中的元素个数则说明区间<code>&amp;</code>和中这一位为0。采用这个方法，可以将三种区间和的查询控制在$O(n)$时间构建，$O(1)$时间查询。</p>
<p>其次注意到对于同一个起始点来说，随着区间的增大，这个区间的<code>&amp;</code>和会不断减小，<code>|</code>和会不断增大。通过这个性质可以采用二分查找的方式找到我们的目标区间。最后不断更新最小值即可。</p>
<h3 id="相关知识及拓展阅读-1">相关知识及拓展阅读</h3>
<p>建议了解相关二分查找和区间运算的知识，不为竞赛准备仅丰富知识的话建议了解并学习以下算法及数据结构知识: 二分查找、前缀和、差分、树状数组、线段树。 (排名分先后)</p>
<h3 id="一个大概可行的程序-1">一个大概可行的程序</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#</span><span class="cp">include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mf">1e5</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">maxbin</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">numrange</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">pre_and</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span><span class="p">[</span><span class="n">maxbin</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">pre_or</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span><span class="p">[</span><span class="n">maxbin</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">pre_xor</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>

<span class="kr">inline</span> <span class="kt">int</span> <span class="nf">cnt</span><span class="p">(</span><span class="kt">int</span> <span class="n">t</span><span class="p">)</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">numrange</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">t</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
        <span class="n">t</span><span class="o">/</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="o">=</span><span class="mi">0</span> <span class="o">|</span><span class="o">|</span> <span class="n">c</span><span class="o">=</span><span class="o">=</span><span class="mi">6</span> <span class="o">|</span><span class="o">|</span> <span class="n">c</span><span class="o">=</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span><span class="n">ans</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span><span class="n">ans</span><span class="o">+</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">=</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// [s,t]
</span><span class="c1"></span><span class="kr">inline</span> <span class="kt">int</span> <span class="nf">rangeAnd</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">)</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxbin</span><span class="p">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pre_and</span><span class="p">[</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">pre_and</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span><span class="o">=</span> <span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">+</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span><span class="o">&lt;</span> <span class="n">i</span><span class="p">)</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// [s,t]
</span><span class="c1"></span><span class="kr">inline</span> <span class="kt">int</span> <span class="nf">rangeOr</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">)</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxbin</span><span class="p">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pre_or</span><span class="p">[</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">pre_or</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">+</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span><span class="o">&lt;</span> <span class="n">i</span><span class="p">)</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="c1">// k
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>
    <span class="c1">// m
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">b</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>
    <span class="c1">// h
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">k</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
        <span class="n">cin</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">maxbin</span><span class="p">;</span> <span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">pre_and</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre_and</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>  <span class="o">+</span> <span class="p">(</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span><span class="p">;</span>
            <span class="n">pre_or</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>  <span class="o">=</span> <span class="n">pre_or</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>  <span class="o">+</span> <span class="p">(</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">pre_xor</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre_xor</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="kt">int</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">)</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">&gt;</span><span class="o">&gt;</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">rangeAnd</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span> <span class="o">&lt;</span><span class="o">=</span> <span class="n">rangeOr</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span><span class="p">)</span>
                <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">while</span><span class="p">(</span><span class="n">rangeAnd</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">lo</span><span class="p">)</span><span class="o">=</span><span class="o">=</span><span class="n">rangeOr</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">lo</span><span class="p">)</span> <span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">rangeAnd</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">lo</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="n">pre_xor</span><span class="p">[</span><span class="n">lo</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">pre_xor</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">cnt</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">rangeAnd</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">lo</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="n">pre_xor</span><span class="p">[</span><span class="n">lo</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">pre_xor</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">lo</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">lo</span><span class="o">&gt;</span><span class="o">=</span><span class="n">k</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="n">ans</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="portal">Portal</h2>
<p><a href="https://www.yanhaozhe.cn/problem/20">题目在这里</a></p>
<h3 id="考察知识-2">考察知识</h3>
<p>博弈搜索、记忆化搜索、深度优先搜索、广度优先搜索。</p>
<h3 id="题意分析-2">题意分析</h3>
<p>给定两张顶点相同，边可能不相同的无向连通图，给定两个人a，b的初始位置。两人轮流移动，a的目的是到达出口，b的目的是在a到达出口之前抓住他。</p>
<h3 id="题解-2">题解</h3>
<h4 id="利用bfs更新状态">利用BFS更新状态</h4>
<p>首先两人轮流移动，那么根据类似游戏的知识，我们可以知道：如果我在这个回合有一个移动，在这样做之后，对方不管怎么移动都是我赢，那么我这个回合就可以必胜（选择上述的移动）。同样的，如果我在这个回合，无论怎么移动，我都一定必输，那么我这个回合一定必输。如果对于一个回合，我既不会必输也不会必胜，那么就应该会产生平局。<br>
根据上述描述，我们可以尝试枚举所有的状态<code>s[turn][apos][bpos]</code>，turn代表当前是a还是b的回合，这个状态可能有三种值：未探索过、a胜利、b胜利。我们可以轻易地知道当$apos = bpos$时，b胜利。也知道无论b在哪里，只要$apos = 0$,那么a胜利。可以采用一个队列从最开始我们知道的必输或必胜状态更新，直到覆盖初始状态状态。直到没有新的状态被加入到队列时，剩余的状态都是平局。</p>
<h4 id="利用dfs直接搜索">利用DFS直接搜索</h4>
<p>原理上DFS同样可以完成搜索的工作且复杂度比BFS低，但因为作者是个菜鸡不会数学证明平局的条件，导致放弃了这个做法。
EDIT：经过提醒，leetcode上<a href="https://leetcode-cn.com/problems/cat-and-mouse/">有一道题</a>，和这道题目很接近，可以参考网络上其他人对于这个题目的解法。</p>
<h3 id="相关知识及拓展阅读-2">相关知识及拓展阅读</h3>
<p>建议学习图的相关知识和搜索的相关知识。</p>
<p>搜索相关的知识: 深度优先搜索，广度优先搜索，迭代加深，记忆化搜索，IDA*，回溯法。</p>
<p>图的相关知识: 图的存储，连通性判断，拓扑排序，最小生成树，最短路，图的着色问题。</p>
<h3 id="一个大概可行的程序-2">一个大概可行的程序</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#</span><span class="cp">include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">MAXN</span> <span class="o">=</span> <span class="mi">505</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">PTURN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">ATURN</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">PWIN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">AWIN</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a_graph</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">p_graph</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

<span class="c1">// res[P-Body][Atlas][turn 0|1] 
</span><span class="c1"></span><span class="c1">// 2 for Atlas win ; 1 for P-Body win
</span><span class="c1"></span><span class="kt">int</span> <span class="n">res</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">a_pos</span> <span class="p">,</span> <span class="kt">int</span> <span class="n">p_pos</span><span class="p">)</span><span class="p">{</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">degree</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">;</span>
    <span class="c1">// a win
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">AWIN</span><span class="p">;</span>
        <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">AWIN</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">PTURN</span><span class="p">,</span><span class="n">AWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">ATURN</span><span class="p">,</span><span class="n">AWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// p win
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">PWIN</span><span class="p">;</span>
        <span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">PWIN</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">PTURN</span><span class="p">,</span><span class="n">PWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">ATURN</span><span class="p">,</span><span class="n">PWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
        <span class="k">auto</span> <span class="n">c</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">ppos</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="p">,</span><span class="n">apos</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="p">,</span><span class="n">turn</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="p">,</span><span class="n">win</span><span class="o">=</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="p">;</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">win</span><span class="o">=</span><span class="o">=</span><span class="n">PWIN</span><span class="p">)</span><span class="p">{</span><span class="c1">// p win || a always lose
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">turn</span><span class="o">=</span><span class="o">=</span><span class="n">PTURN</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// p&#39;s turn
</span><span class="c1"></span>                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">a_graph</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a_graph</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
                    <span class="n">degree</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">degree</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span> <span class="o">=</span><span class="o">=</span> <span class="n">a_graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                        <span class="n">res</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">PWIN</span><span class="p">;</span>
                        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="n">ppos</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">ATURN</span><span class="p">,</span><span class="n">PWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
                        
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="c1">// a&#39;s turn
</span><span class="c1"></span>                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">p_graph</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">p_graph</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
                    <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">PWIN</span><span class="p">;</span>
                    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">apos</span><span class="p">,</span><span class="n">PTURN</span><span class="p">,</span><span class="n">PWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="c1">// a win || p always lose
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">turn</span><span class="o">=</span><span class="o">=</span><span class="n">PTURN</span><span class="p">)</span><span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">a_graph</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a_graph</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
                    <span class="n">res</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">AWIN</span><span class="p">;</span>
                    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="n">ppos</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">ATURN</span><span class="p">,</span><span class="n">AWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">p_graph</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">p_graph</span><span class="p">[</span><span class="n">ppos</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
                    <span class="n">degree</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">degree</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span> <span class="o">=</span><span class="o">=</span> <span class="n">p_graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                        <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">apos</span><span class="p">]</span><span class="p">[</span><span class="n">PTURN</span><span class="p">]</span> <span class="o">=</span> <span class="n">AWIN</span><span class="p">;</span>
                        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">apos</span><span class="p">,</span><span class="n">PTURN</span><span class="p">,</span><span class="n">AWIN</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="n">p_pos</span><span class="p">]</span><span class="p">[</span><span class="n">a_pos</span><span class="p">]</span><span class="p">[</span><span class="n">ATURN</span><span class="p">]</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">n</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">a</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">b</span><span class="p">;</span>
    <span class="c1">// read graph 1
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">cin</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">t</span><span class="p">)</span><span class="p">{</span>
            <span class="n">a_graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="n">a_graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pos</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="p">}</span>
            <span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// read graph 2
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">cin</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="n">t</span><span class="p">)</span><span class="p">{</span>
            <span class="n">p_graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span><span class="n">p_graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">MAXN</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pos</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="p">}</span>
            <span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="o">=</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">cout</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="sa"></span><span class="s">&#34;</span><span class="s">GLaDOS</span><span class="s">&#34;</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="o">=</span><span class="o">=</span><span class="n">PWIN</span><span class="p">)</span>
        <span class="n">cout</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="sa"></span><span class="s">&#34;</span><span class="s">P-Body</span><span class="s">&#34;</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">cout</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="sa"></span><span class="s">&#34;</span><span class="s">Atlas</span><span class="s">&#34;</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="lets-ac-it-together">Let's AC it together</h2>
<p><a href="https://www.yanhaozhe.cn/problem"><del>题目在这里</del></a></p>
<h3 id="考察知识-3">考察知识</h3>
<p>搜索引擎的使用、gdb调试、代码调试能力、探索精神。</p>
<h3 id="题意分析-3">题意分析</h3>
<p>题目中已经暗示了给定的程序一定算不出来，因此肯定需要其他方式得到答案。</p>
<h3 id="题解-3">题解</h3>
<p>首先看python文件，可以看到如果要输出答案，要求是计算出的字符串末尾有连续的十五个<code>0</code>。然后考虑exe文件，根据提示，编译指令中带有 <code>--ggdb</code>，如果用过gdb应该能反映出来这样编译的exe文件可以查看其源代码，如果没用过在网上百度/谷歌之后也可以得到类似的信息。在获得代码后，可以看到源代码中反复出现<code>sha256</code>，如果好奇心比较重去搜索一下的话，可以得知这是一个哈希函数，往往用于加密通信等业务中。然后这个题目的目的就相对明晰了。即找到一个十六进制字符串，让它经过sha256之后末尾有超过16个连续的<code>0</code>。</p>
<p>这样问题就变成了如何找到这样一个字符串。要知道哈希函数的重要特征就是很难通过结果还原原本的内容，所以如果我们采用末尾十五个零这样的条件尝试构造一个字符串是相当困难的。但如果在网上搜索还原sha256的方式，应该能找到<code>hashcat</code>这样一个应用，可以帮助你尝试构造出指定的字符串，这样在比赛时间内应该是有机会找到答案的。
但这不是我出题的本意，如果回到代码，可以看到头文件中包含了一个<code>&lt;bit/coin&gt;</code>这样的头文件，以及紧跟着声明的第一个函数名字叫做<code>header_to_ans</code>。如果将它们连起来，就会变成<code>bitcoin header to ans</code>。也就是比特币的头可以得到答案。
如果了解区块链的相关知识，这里已经可以反映出来如何找到答案了。区块链为了确定每一个block的所有权，会让所有的参与者<del>浪费电</del>计算一个无意义的哈希函数,而这个哈希函数的要求就是结果中有超过一定数目的连续<code>0</code>在结尾。因此，随意在网络上找到一个比特币区块的信息就可以解决这个答案。</p>
<p>当然有人会反映区块链要求的是开头有很多连续的<code>0</code>，而不是和这个题目要求的结尾有多少连续的<code>0</code>。对此我之前也有所误解，建议阅读<a href="https://en.bitcoin.it/wiki/Block_hashing_algorithm">wiki</a>。</p>
<h3 id="相关知识及拓展阅读-3">相关知识及拓展阅读</h3>
<p>建议学习搜索未知知识的能力和通过互联网完成自己需求的能力，同时紧跟各种新科技技术的神奇发展。
这些都是一个不甘平庸的程序员应该具备的基本素养。</p>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E9%A2%98%E8%A7%A3/">题解</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 180 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-180/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-180/</guid>
                <pubDate>Sun, 15 Mar 2020 11:57:45 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>前三题手速+模板，D题优先队列</p>
<h2 id="a题-1380-lucky-numbers-in-a-matrix">A题: <a href="https://leetcode.com/problems/lucky-numbers-in-a-matrix/">1380. Lucky Numbers in a Matrix</a></h2>
<p>按照题目要求，先找到每行最小的，然后确认是不是列最大的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">luckyNumbers</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">matrix</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">matrix</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">minn</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">minn</span><span class="p">]</span><span class="p">)</span><span class="n">minn</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">maxx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">matrix</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                <span class="k">if</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">[</span><span class="n">minn</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">matrix</span><span class="p">[</span><span class="n">maxx</span><span class="p">]</span><span class="p">[</span><span class="n">minn</span><span class="p">]</span><span class="p">)</span><span class="n">maxx</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">maxx</span> <span class="o">=</span><span class="o">=</span> <span class="n">i</span><span class="p">)</span><span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">minn</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="b题-1381-design-a-stack-with-increment-operation">B题: <a href="https://leetcode.com/problems/design-a-stack-with-increment-operation/">1381. Design a Stack With Increment Operation</a></h2>
<p>自己用数组实现一个栈就可以了，按数据暴力可以直接过。想要更低复杂度可以做一次差分。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">CustomStack</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">s</span><span class="p">[</span><span class="mi">1005</span><span class="p">]</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">lim</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">CustomStack</span><span class="p">(</span><span class="kt">int</span> <span class="n">maxSize</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lim</span> <span class="o">=</span> <span class="n">maxSize</span><span class="p">;</span>
        <span class="n">top</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">top</span><span class="o">&gt;</span><span class="o">=</span><span class="n">lim</span><span class="p">)</span><span class="k">return</span><span class="p">;</span>
        <span class="n">s</span><span class="p">[</span><span class="n">top</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">top</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">pop</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">top</span> <span class="o">=</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">top</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">top</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="nf">increment</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">top</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">l</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">=</span><span class="n">val</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="c题-1382-balance-a-binary-search-tree">C题: <a href="https://leetcode.com/problems/balance-a-binary-search-tree/">1382. Balance a Binary Search Tree</a></h2>
<p>转化二叉搜索树为一个平衡二叉搜索树。利用对二叉搜索树中序遍历可获得排序数组的特性，先转换为排序好的数组，然后在重构一个二叉树就好了。题目数据卡常数，用<code>vector</code>就会超时，数组就不会。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">r</span><span class="p">[</span><span class="mi">10005</span><span class="p">]</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">void</span> <span class="nf">inord</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span><span class="k">return</span><span class="p">;</span>
        <span class="n">inord</span><span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">)</span><span class="p">;</span>
        <span class="n">r</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="o">+</span><span class="p">]</span><span class="o">=</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">;</span>
        <span class="n">inord</span><span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">TreeNode</span><span class="o">*</span> <span class="nf">bst</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">,</span><span class="kt">int</span> <span class="n">end</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">start</span><span class="o">&gt;</span><span class="n">end</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="n">start</span><span class="o">+</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> 
        <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="o">=</span><span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
        <span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="o">=</span><span class="n">bst</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
        <span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="o">=</span><span class="n">bst</span><span class="p">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">end</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">TreeNode</span><span class="o">*</span> <span class="nf">balanceBST</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">inord</span><span class="p">(</span><span class="n">root</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">bst</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="d题-1383-maximum-performance-of-a-team">D题: <a href="https://leetcode.com/problems/maximum-performance-of-a-team/">1383. Maximum Performance of a Team</a></h2>
<p>显然<code>efficiency</code>更容易影响结果，那么朴素的考虑贪心的从<code>efficiency</code>最大的几个人中选。但是有反例就是某些人<code>speed</code>特别大，给整体带来的影响大于<code>efficiency</code>的改变，因此简单的贪心不成立。但仍然应该先考虑<code>efficiency</code>大的人，因为这样我们只需要维护<code>speed</code>的和就好了，计算结果的时候直接使用当前这个人的<code>efficiency</code>（他的效率小于等于之前考虑过的所有人）。所以思路转换成了效率为$n$时，从效率大于$n$的人中选出<code>speed</code>最大的$k$个人，显然我们可以用一个优先队列维护<code>speed</code>。<br>
最后考虑数值，最坏情况下有<code>1e5</code>个人，每个人速度<code>1e5</code>效率<code>1e8</code>, 结果大约是 <code>1e18</code>, 已经超过了<code>long long</code>的范围，所以理论上可能需要分别记录结果除以<code>1e9+7</code>的整数部分和余数部分，但比赛的时候懒了没有做，事实证明数据也不够强。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">maxPerformance</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">speed</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">efficiency</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ori</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span>
        <span class="c1">//按照效率排序
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="n">ori</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">ori</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">ori</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="p">[</span><span class="o">&amp;</span><span class="p">]</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">int</span> <span class="n">j</span><span class="p">)</span><span class="p">{</span><span class="k">return</span> <span class="n">efficiency</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="n">efficiency</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">i</span><span class="p">:</span><span class="n">ori</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="o">&gt;</span><span class="o">=</span><span class="n">k</span><span class="p">)</span><span class="p">{</span> <span class="c1">// 已经够k个人就去掉一个速度最低的
</span><span class="c1"></span>                <span class="n">sum</span> <span class="o">-</span><span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
                <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//加入新人，检查表现值有没有更大
</span><span class="c1"></span>            <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">speed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">speed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">sum</span><span class="o">*</span><span class="n">efficiency</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">%</span><span class="p">(</span><span class="mi">1000000007</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 179 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-179/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-179/</guid>
                <pubDate>Sun, 08 Mar 2020 12:30:56 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>手速场，A题简单构造，B题找规律，C题按要求搜索，D题简单dfs。</p>
<h2 id="a题-1374-generate-a-string-with-characters-that-have-odd-counts">A题: <a href="https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/">1374. Generate a String With Characters That Have Odd Counts</a></h2>
<p>所有字母都要奇数个，那么只用最多两种字母构造，如果<code>n</code>是奇数则全是<code>a</code>，如果是偶数则第一个字母变成<code>b</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">generateTheString</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">string</span> <span class="n">ans</span> <span class="o">=</span> <span class="sa"></span><span class="s">&#34;</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">+</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">a</span><span class="sc">&#39;</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">=</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="n">ans</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">b</span><span class="sc">&#39;</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="b题-1375-bulb-switcher-iii">B题: <a href="https://leetcode.com/problems/bulb-switcher-iii/">1375. Bulb Switcher III</a></h2>
<p>要找到所有当前点亮灯全是蓝灯的时刻。那么根据蓝灯定义，前面都要点亮，也就是说对于任意一个时刻，如果点亮的最靠后面的灯的位置为<code>x</code>，那么如果这个时刻恰好点亮了<code>x</code>盏灯，这个时刻就符合条件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">numTimesAllBlue</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">light</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">light</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">light</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">last</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">last</span><span class="p">,</span><span class="n">light</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
            <span class="n">cnt</span> <span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">=</span><span class="o">=</span> <span class="n">last</span><span class="p">)</span> <span class="n">ans</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="c题-1376-time-needed-to-inform-all-employees">C题: <a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/">1376. Time Needed to Inform All Employees</a></h2>
<p>对于每一个员工，被通知到的时间和他上级被通知到的时间关系是确定的。常规的思路是从上级开始向下一层层传递，但题目给的索引是从下级到上级查找。那么需要缓存一下被查找过的上级通知的时间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mf">1e5</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">record</span><span class="p">[</span><span class="n">maxn</span><span class="p">]</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">reach</span><span class="p">(</span><span class="kt">int</span> <span class="n">cur</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">manager</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">informTime</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">;</span>
        <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="n">reach</span><span class="p">(</span><span class="n">manager</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">,</span><span class="n">manager</span><span class="p">,</span> <span class="n">informTime</span><span class="p">)</span> <span class="o">+</span> <span class="n">informTime</span><span class="p">[</span><span class="n">manager</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">]</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">numOfMinutes</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">headID</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">manager</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">informTime</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">record</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">record</span><span class="p">[</span><span class="n">headID</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">reach</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">manager</span><span class="p">,</span> <span class="n">informTime</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="d题-1377-frog-position-after-t-seconds">D题: <a href="https://leetcode.com/problems/frog-position-after-t-seconds/">1377. Frog Position After T Seconds</a></h2>
<p>表面上是个求期望的题，本质是一个dfs，主要要限制深度为给定的<code>time</code>。因为是一颗树，所以不存在回头的可能，每一点的概率都由来的点决定，直接搜索就可以了。因为如果有路可以走就必须移动，所以当青蛙到达<code>target</code>时需要判断，如果还有路可以走的话，那么走到终点的期望就是<code>0</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">e</span><span class="p">[</span><span class="mi">105</span><span class="p">]</span><span class="p">[</span><span class="mi">105</span><span class="p">]</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">record</span><span class="p">[</span><span class="mi">105</span><span class="p">]</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cnt</span><span class="p">[</span><span class="mi">105</span><span class="p">]</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">lim</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ns</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">tar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">cur</span><span class="p">,</span><span class="kt">int</span> <span class="n">step</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">step</span> <span class="o">&gt;</span> <span class="n">lim</span><span class="p">)</span><span class="k">return</span> <span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ns</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">record</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
                    <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="n">record</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="n">record</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
            <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ns</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">record</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">tar</span> <span class="o">=</span><span class="o">=</span> <span class="n">cur</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">step</span><span class="o">&lt;</span><span class="n">lim</span><span class="p">)</span><span class="p">{</span>
                    <span class="n">record</span><span class="p">[</span><span class="n">tar</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">step</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">double</span> <span class="nf">frogPosition</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">edges</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">record</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
                <span class="n">e</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span><span class="p">:</span><span class="n">edges</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="p">}</span>    
        <span class="p">}</span>
        <span class="n">lim</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
        <span class="n">ns</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
        <span class="n">tar</span> <span class="o">=</span> <span class="n">target</span><span class="p">;</span>
        <span class="n">record</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">record</span><span class="p">[</span><span class="n">target</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="n">record</span><span class="p">[</span><span class="n">target</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode B21 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-b21/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-b21/</guid>
                <pubDate>Sun, 08 Mar 2020 00:27:02 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>周赛质量回升。。。 A题一如既往可暴力，B题需要状态压缩，C、D两题二叉树思路基本一致。</p>
<h2 id="a题-1370-increasing-decreasing-string">A题: <a href="https://leetcode.com/problems/increasing-decreasing-string/">1370. Increasing Decreasing String</a></h2>
<p>首先数据量很小，暴力就可以直接模拟题目的过程做。想要降低复杂度也可以对各个字母出现次数计数，然后直接构造结果。因为懒得数数，现场就直接模拟了。。。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">visit</span><span class="p">[</span><span class="mi">505</span><span class="p">]</span><span class="p">;</span>
    
    <span class="kr">inline</span> <span class="kt">bool</span> <span class="nf">all</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">string</span> <span class="nf">sortString</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">ans</span> <span class="o">=</span> <span class="sa"></span><span class="s">&#34;</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">all</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span><span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
                    <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                    <span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">&lt;</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                        <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span><span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
                        <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                        <span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">-</span><span class="o">-</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span><span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
                    <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                    <span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">-</span><span class="o">-</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">not</span> <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">&gt;</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                        <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span><span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
                        <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                        <span class="n">pos</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="b题-1371-find-the-longest-substring-containing-vowels-in-even-counts">B题: <a href="https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/">1371. Find the Longest Substring Containing Vowels in Even Counts</a></h2>
<p><del>大概是最难的一道题</del><br>
首先有五个字母需要考虑，每一个<code>substring</code>中要所有五个字母都是偶数个。值得注意的是只限定了偶数意味着每次一个元音字母的出现都会让情况翻转，我们需要找到上一次出现这种元音字母状况组合的位置。比如某一个位置五个元音字母的状况分别是<code>奇偶奇偶奇</code>，那么以这个位置结尾的<code>substring</code>最长就应该到<code>奇偶奇偶奇</code>这个组合第一次出现的位置（如果没有说明根本组不成要求的字符串）。<br>
所以我们需要记录某一个组合第一次出现的位置，因为只需要考虑奇偶，我们可以用二进制进行压缩。 $2^5 = 32$ 我们只需要一个大小为32的<code>int</code>数组就能存放所有位置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">findTheLongestSubstring</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">record</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">record</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">record</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="n">record</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                <span class="k">case</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">a</span><span class="sc">&#39;</span><span class="o">:</span>
                    <span class="n">cur</span> <span class="o">^</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">e</span><span class="sc">&#39;</span><span class="o">:</span>
                    <span class="n">cur</span> <span class="o">^</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">i</span><span class="sc">&#39;</span><span class="o">:</span>
                    <span class="n">cur</span> <span class="o">^</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">o</span><span class="sc">&#39;</span><span class="o">:</span>
                    <span class="n">cur</span> <span class="o">^</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">u</span><span class="sc">&#39;</span><span class="o">:</span>
                    <span class="n">cur</span> <span class="o">^</span><span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">)</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">&gt;</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">i</span><span class="o">-</span><span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
            <span class="k">else</span> <span class="n">record</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="c题-1372-longest-zigzag-path-in-a-binary-tree">C题: <a href="https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/">1372. Longest ZigZag Path in a Binary Tree</a></h2>
<p>找到一个二叉树中最长的左右横跳的一个串的长度。类似在树上进行dp（dp的本质其实是搜索），除了<code>root</code>之外，一个节点<code>cur</code>如果是父亲的左节点，那么他可以在<code>cur</code>的右节点的基础上再把自己加上（长度加一）。当然也有可能最长的序列不包含<code>cur</code>，而是在<code>cur</code>的左节点上，那么再对左节点进行一次遍历就好了。进行遍历的时候更新最大长度。注意要利用函数的返回值，每次函数会返回当前节点为根的子树能形成的最长序列的长度，这样每个节点只会被访问一次，所以复杂度$O(n)$。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    
    <span class="kt">int</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">cur</span><span class="p">,</span><span class="kt">bool</span> <span class="n">f</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">cur</span><span class="o">=</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="p">{</span>
            <span class="c1">// this is a left child
</span><span class="c1"></span>            <span class="n">dfs</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span><span class="n">f</span><span class="p">)</span><span class="p">;</span>
            <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">,</span><span class="o">!</span><span class="n">f</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">)</span><span class="n">ans</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="c1">// this is a right child
</span><span class="c1"></span>            <span class="n">dfs</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">,</span><span class="n">f</span><span class="p">)</span><span class="p">;</span>
            <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span><span class="o">!</span><span class="n">f</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="o">&gt;</span><span class="n">ans</span><span class="p">)</span><span class="n">ans</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">longestZigZag</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">,</span><span class="nb">false</span><span class="p">)</span><span class="p">;</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span><span class="nb">true</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">=</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="n">ans</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="d题-1373-maximum-sum-bst-in-binary-tree">D题: <a href="https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/">1373. Maximum Sum BST in Binary Tree</a></h2>
<p>和C题思路基本是一样的，对于每个节点我们判断一下它能不能组成BST，判断方法是判断左右子树是不是BST，并判断左子树的最大值是不是比当前节点小，以及右子树的最小值是不是比当前节点大。如果判断都通过了，那么说明当前节点为根子树是BST，向上返回左子树、右子树、自身的和。并且如果当前节点是上一个节点的左儿子，那么返回当前BST的最大值（因为父亲节点要和左子树的最大值判断）。如果是右儿子则反之。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    
    <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">subbst</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">cur</span><span class="p">,</span><span class="kt">int</span> <span class="n">f</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="p">{</span>
            <span class="c1">//left child
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">cur</span><span class="o">=</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="n">INT_MIN</span><span class="p">}</span><span class="p">;</span>
            <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">subbst</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span><span class="nb">true</span><span class="p">)</span><span class="p">;</span>
            <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">subbst</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">,</span><span class="nb">false</span><span class="p">)</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="p">{</span>
                <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">+</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span><span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">s</span><span class="p">)</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="p">{</span><span class="n">s</span><span class="p">,</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">}</span><span class="p">;</span>
                <span class="k">return</span> <span class="p">{</span><span class="n">s</span><span class="p">,</span><span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">}</span><span class="p">;</span>
            <span class="p">}</span><span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="n">INT_MAX</span><span class="p">}</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="c1">//right child
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">cur</span><span class="o">=</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="n">INT_MAX</span><span class="p">}</span><span class="p">;</span>
            <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">subbst</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span><span class="nb">true</span><span class="p">)</span><span class="p">;</span>
            <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">subbst</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">,</span><span class="nb">false</span><span class="p">)</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="p">{</span>
                <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">+</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span><span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">s</span><span class="p">)</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="p">{</span><span class="n">s</span><span class="p">,</span><span class="n">cur</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">}</span><span class="p">;</span>
                <span class="k">return</span> <span class="p">{</span><span class="n">s</span><span class="p">,</span><span class="n">a</span><span class="p">.</span><span class="n">second</span><span class="p">}</span><span class="p">;</span>
            <span class="p">}</span><span class="k">return</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="n">INT_MIN</span><span class="p">}</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">maxSumBST</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">subbst</span><span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span><span class="nb">true</span><span class="p">)</span><span class="p">;</span>
        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">subbst</span><span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">,</span><span class="nb">false</span><span class="p">)</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="p">{</span>
                <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span> <span class="o">+</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span><span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">s</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 178 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-178/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-178/</guid>
                <pubDate>Sun, 01 Mar 2020 22:34:09 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>总的来说...这周是最近最不简单的一周了。<br>
AB日常水，C题似曾相识，D题 <del>DP</del> BFS。</p>
<h2 id="a题-1365-how-many-numbers-are-smaller-than-the-current-number">A题: <a href="https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/">1365. How Many Numbers Are Smaller Than the Current Number</a></h2>
<p>最大500的数据量，直接暴力算。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">smallerNumbersThanCurrent</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">i</span><span class="p">:</span><span class="n">nums</span><span class="p">)</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">j</span><span class="p">:</span><span class="n">nums</span><span class="p">)</span>
                <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">j</span><span class="p">)</span><span class="n">cnt</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="b题-1366-rank-teams-by-votes">B题: <a href="https://leetcode.com/problems/rank-teams-by-votes/">1366. Rank Teams by Votes</a></h2>
<p>最多26个字母26个位次，统计一遍所有字母在所有位置出现的次数，然后按题目排序就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="n">cnt</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">static</span> <span class="kt">bool</span> <span class="n">cmp</span><span class="p">(</span><span class="kt">char</span> <span class="n">a</span><span class="p">,</span><span class="kt">char</span> <span class="n">b</span><span class="p">)</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">A</span><span class="sc">&#39;</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="n">cnt</span><span class="p">[</span><span class="n">b</span><span class="o">-</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">A</span><span class="sc">&#39;</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="k">return</span> <span class="n">cnt</span><span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">A</span><span class="sc">&#39;</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="n">cnt</span><span class="p">[</span><span class="n">b</span><span class="o">-</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">A</span><span class="sc">&#39;</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">b</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">string</span> <span class="nf">rankTeams</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">votes</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">26</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">26</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">votes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">string</span> <span class="nl">s</span><span class="p">:</span><span class="n">votes</span><span class="p">)</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">A</span><span class="sc">&#39;</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">votes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">cmp</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="c题-1367-linked-list-in-binary-tree">C题: <a href="https://leetcode.com/problems/linked-list-in-binary-tree/solution/">1367. Linked List in Binary Tree</a></h2>
<p>在一颗树上找到一段序列，朴素的用dfs判断一下所有的位置能否匹配所有序列，复杂度$O(m*n)$。
应该也可以类似KMP的算法，把复杂度降到$O(m+n)$，但时间要紧就放弃了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">isSubPath</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">return</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="n">root</span><span class="p">)</span> <span class="o">|</span><span class="o">|</span> <span class="n">isSubPath</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">)</span> <span class="o">|</span><span class="o">|</span> <span class="n">isSubPath</span><span class="p">(</span><span class="n">head</span><span class="p">,</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">,</span> <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">head</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="o">!</span><span class="o">=</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="p">)</span><span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">head</span><span class="o">-</span><span class="o">&gt;</span><span class="n">next</span><span class="p">,</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">)</span> <span class="o">|</span><span class="o">|</span> <span class="n">dfs</span><span class="p">(</span><span class="n">head</span><span class="o">-</span><span class="o">&gt;</span><span class="n">next</span><span class="p">,</span><span class="n">root</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="d题-1368-minimum-cost-to-make-at-least-one-valid-path-in-a-grid">D题: <a href="https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/">1368. Minimum Cost to Make at Least One Valid Path in a Grid</a></h2>
<p>有丶意思的一道题，场上当成DP做的，写了一半发现是BFS，但是考虑了一下沉没成本还是DP莽下去了...<br>
BFS的思路就是从出发点开始走，按照条件更新相邻位置的cost，如果更新成功了就把对应的位置加入队列（因为有可能需要更新周围的cost）。然后因为有的时候到另外一个点cost不会增加，这个时候把这个位置放到队列头（双端队列），因为它相比其他位置更容易达到最优所以先更新它。最后BFS遍历完所有的点的时候所有位置的cost都稳定了，也都是最小。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">minCost</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">deque</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">n</span><span class="o">=</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cost</span><span class="p">[</span><span class="mi">105</span><span class="p">]</span><span class="p">[</span><span class="mi">105</span><span class="p">]</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="n">cost</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">INT_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}</span><span class="p">;</span>
        <span class="n">cost</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push_front</span><span class="p">(</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">cx</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="n">first</span><span class="p">,</span><span class="n">cy</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            <span class="n">q</span><span class="p">.</span><span class="n">pop_front</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="n">k</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cx</span><span class="o">+</span><span class="n">dx</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cy</span><span class="o">+</span><span class="n">dy</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">nx</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">nx</span><span class="o">&lt;</span><span class="n">m</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">ny</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span><span class="p">{</span>
                    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">cost</span><span class="p">[</span><span class="n">cx</span><span class="p">]</span><span class="p">[</span><span class="n">cy</span><span class="p">]</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">cx</span><span class="p">]</span><span class="p">[</span><span class="n">cy</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
                        <span class="k">if</span>  <span class="p">(</span><span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="o">&lt;</span><span class="n">cost</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span><span class="p">[</span><span class="n">ny</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                            <span class="n">cost</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span><span class="p">[</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                            <span class="n">q</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="p">{</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                    <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">c</span><span class="o">&lt;</span><span class="n">cost</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span><span class="p">[</span><span class="n">ny</span><span class="p">]</span><span class="p">)</span><span class="p">{</span>
                        <span class="n">cost</span><span class="p">[</span><span class="n">nx</span><span class="p">]</span><span class="p">[</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
                        <span class="n">q</span><span class="p">.</span><span class="n">push_front</span><span class="p">(</span><span class="p">{</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">cost</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>稳字经</title>
                <link>https://hanshanglin.space/life/stead/</link>
                <guid isPermaLink="true">https://hanshanglin.space/life/stead/</guid>
                <pubDate>Tue, 25 Feb 2020 09:27:37 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>生来往，莫管闲，仙已固，难争先。</p>
<h2 id="稳字经">《稳字经》</h2>
<h3 id="洪荒佚名">洪荒·佚名</h3>
<p>生来往，莫管闲，仙已固，难争先。遇不平，思自力，遭难事，需自省。朋若多，事无躲，友若寡，免横祸。敌莫立，立必危，先下手，后成灰。莫自持，休自惧，万事稳，可得宁。修歧路，退则进，得机缘，谋而定。昔红某，老好人，终被算，何其惨。有妖能，谋算多，被敲昏，扔铁锅。旧浊族，慎思弱，力逆天，无奈何。前古族，意不平，强争运，终落寞。后双雄，分天地，受挑拨，皆败落。新人起，颂礼乐，得圣贤，明士多。至我辈，霉运躲，仙路全，得道果。事稳健，拒因果，免夺强，自可乐。避天灾，需变化，躲人祸，不留锅。朝闻道，明仙途，稳字经，伴手侧。</p>
<p>作者：<a href="https://my.qidian.com/author/401199896">言归正传</a>
出处： 我师兄实在太稳健了</p>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/life/">life</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E5%A4%84%E4%B8%96/">处世</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 177 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-177/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-177/</guid>
                <pubDate>Sun, 23 Feb 2020 20:36:54 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>学习局手速场。A题现场学Python，B题并查集，C题暴力，D题贪心</p>
<h2 id="a题-1360-number-of-days-between-two-dates">A题: <a href="https://leetcode.com/problems/number-of-days-between-two-dates/">1360. Number of Days Between Two Dates</a></h2>
<p>求两个日期之间的距离，做题方法：谷歌搜索 “python 日期间隔”。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">datetime</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">daysBetweenDates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">date1</span><span class="p">,</span> <span class="n">date2</span><span class="p">)</span><span class="p">:</span>
        <span class="n">d1</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">date1</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">date1</span><span class="p">[</span><span class="mi">5</span><span class="p">:</span><span class="mi">7</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">date1</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>  
        <span class="n">d2</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">date2</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">date2</span><span class="p">[</span><span class="mi">5</span><span class="p">:</span><span class="mi">7</span><span class="p">]</span><span class="p">)</span><span class="p">,</span><span class="nb">int</span><span class="p">(</span><span class="n">date2</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>  
        <span class="n">interval</span> <span class="o">=</span> <span class="n">d2</span> <span class="o">-</span> <span class="n">d1</span>                   
        <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="n">interval</span><span class="o">.</span><span class="n">days</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="b题-1361-validate-binary-tree-nodes">B题: <a href="https://leetcode.com/problems/validate-binary-tree-nodes/">1361. Validate Binary Tree Nodes</a></h2>
<p>很多解法是数一下入度，确定只有一个点入度为0其他都为1。然后数一下边是不是等于节点数目减一。但这样做有一个反例:</p>
<blockquote>
<p>一个单点，另外有一个自环。</p>
</blockquote>
<p>所以正确的做法应该还是需要并查集判断一下是不是只有一个联通块。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MAXN</span> <span class="o">=</span> <span class="mf">1e4</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">p</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">;</span>
    <span class="kr">inline</span> <span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">cur</span><span class="p">)</span><span class="p">{</span>
        <span class="k">return</span> <span class="n">p</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="n">cur</span><span class="o">?</span><span class="nl">cur</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">n1</span><span class="p">,</span><span class="kt">int</span> <span class="n">n2</span><span class="p">)</span><span class="p">{</span>
        <span class="n">p</span><span class="p">[</span><span class="n">find</span><span class="p">(</span><span class="n">n1</span><span class="p">)</span><span class="p">]</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">n2</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">bool</span> <span class="nf">validateBinaryTreeNodes</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">lc</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">rc</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="p">[</span><span class="n">MAXN</span><span class="p">]</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">lc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">lc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                <span class="n">merge</span><span class="p">(</span><span class="n">lc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">rc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">rc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                <span class="n">merge</span><span class="p">(</span><span class="n">rc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">cnt_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="c1">// one component
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">!</span><span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="c1">// max degree = 1
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="c1">// one root
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt_0</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">cnt_0</span><span class="o">=</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="c题-1362-closest-divisors">C题: <a href="https://leetcode.com/problems/closest-divisors/">1362. Closest Divisors</a></h2>
<p>数据规模不大，暴力求一下因子。因为和一定时，两数想等乘积最大，所以从 $sqrt(num+1)$ 或 $sqrt(num+2)$开始往下找，找到的第一对就是相差最小的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">factor</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">-</span><span class="o">-</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span> <span class="o">=</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="o">/</span><span class="n">i</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">999999999</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">closestDivisors</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tmp1</span> <span class="o">=</span> <span class="n">factor</span><span class="p">(</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tmp2</span> <span class="o">=</span> <span class="n">factor</span><span class="p">(</span><span class="n">num</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">tmp1</span><span class="p">.</span><span class="n">first</span> <span class="o">-</span> <span class="n">tmp1</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="o">&lt;</span><span class="n">abs</span><span class="p">(</span><span class="n">tmp2</span><span class="p">.</span><span class="n">first</span> <span class="o">-</span> <span class="n">tmp2</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp1</span><span class="p">.</span><span class="n">first</span><span class="p">)</span><span class="p">;</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp1</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp2</span><span class="p">.</span><span class="n">first</span><span class="p">)</span><span class="p">;</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp2</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="d题-1363-largest-multiple-of-three">D题: <a href="https://leetcode.com/problems/largest-multiple-of-three/">1363. Largest Multiple of Three</a></h2>
<p>很简单的贪心题，因为能被三整除，所以各位相加一定是三的倍数。然后题目要求尽可能大，那么首先位数尽可能多，其次大的数字尽可能靠前。先将所有数字都加入，所有的和如果模三余0，直接构造就好了。如果余1，那么从1、4、7中删除一个数字或者从2、5、8中删除两个。如果余2则先从2、5、8中删除。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">largestMultipleOfThree</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">digits</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">cnt</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">i</span><span class="p">:</span> <span class="n">digits</span><span class="p">)</span> <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">digits</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">digits</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="sa"></span><span class="s">&#34;</span><span class="s">&#34;</span><span class="p">;</span><span class="k">else</span> <span class="k">return</span> <span class="sa"></span><span class="s">&#34;</span><span class="s">0</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">reminder</span> <span class="o">=</span> <span class="n">sum</span><span class="o">%</span><span class="mi">3</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">reminder</span><span class="o">=</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
                <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
                <span class="k">else</span> <span class="n">cnt</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
                <span class="k">while</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span><span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="n">cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="n">tmp</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="p">}</span>
                    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="n">cnt</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="n">tmp</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="p">}</span>
                    <span class="k">else</span> <span class="p">{</span><span class="n">cnt</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="n">tmp</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span><span class="mi">3</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span><span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">reminder</span><span class="o">=</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
                <span class="k">else</span> <span class="n">cnt</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span><span class="p">{</span>
                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
                <span class="k">while</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span><span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="n">cnt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="n">tmp</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="p">}</span>
                    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="n">cnt</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="n">tmp</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="p">}</span>
                    <span class="k">else</span> <span class="p">{</span><span class="n">cnt</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="n">tmp</span><span class="o">-</span><span class="o">-</span><span class="p">;</span><span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span><span class="mi">3</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">string</span> <span class="n">ans</span><span class="o">=</span><span class="sa"></span><span class="s">&#34;</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">9</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">-</span><span class="o">-</span><span class="p">)</span><span class="p">{</span>
            <span class="kt">char</span> <span class="n">adder</span> <span class="o">=</span> <span class="sa"></span><span class="sc">&#39;</span><span class="sc">0</span><span class="sc">&#39;</span><span class="o">+</span><span class="n">i</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span><span class="o">+</span><span class="n">adder</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">0</span><span class="sc">&#39;</span><span class="p">)</span><span class="k">return</span> <span class="sa"></span><span class="s">&#34;</span><span class="s">0</span><span class="s">&#34;</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>

</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode B20 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-b20/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-b20/</guid>
                <pubDate>Sat, 22 Feb 2020 23:50:13 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>双周赛水。。。 A题二进制，B题打骨折，C题双指针+前缀和，D题算数。</p>
<h1 id="a题1356-sort-integers-by-the-number-of-1-bitshttpsleetcodecomproblemssort-integers-by-the-number-of-1-bits">A题:<a href="https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/">1356. Sort Integers by The Number of 1 Bits</a></h1>
<p>数一下二进制数字有几个1，按照要求排序输出就行。这里数二进制1是模板。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">cnt</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span><span class="p">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">a</span> <span class="o">!</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="p">{</span>	
		    <span class="n">count</span><span class="o">+</span><span class="o">+</span><span class="p">;</span> 
		    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="p">)</span><span class="p">;</span> 
	    <span class="p">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sortByBits</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">multiset</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">arr</span><span class="p">)</span>
            <span class="n">res</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="p">{</span><span class="n">cnt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="p">,</span><span class="n">i</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">!</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="o">&gt;</span><span class="n">second</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>

</code></pre></td></tr></table>
</div>
</div><h1 id="b题1357-apply-discount-every-n-ordershttpsleetcodecomproblemsapply-discount-every-n-orders">B题:<a href="https://leetcode.com/problems/apply-discount-every-n-orders/">1357. Apply Discount Every n Orders</a></h1>
<p>按要求构造直接算就好了，注意给的算式，粗心WA了一发。。。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Cashier</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">dc</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">r</span><span class="p">;</span>
    <span class="n">Cashier</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">discount</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">products</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">prices</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">step</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
        <span class="n">dc</span> <span class="o">=</span> <span class="n">discount</span><span class="p">;</span>
        <span class="n">r</span><span class="p">.</span><span class="n">clear</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">products</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">r</span><span class="p">[</span><span class="n">products</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">]</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">double</span> <span class="nf">getBill</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">product</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cnt</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">product</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
             <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="n">product</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">]</span> <span class="o">*</span> <span class="n">amount</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">=</span><span class="o">=</span> <span class="n">step</span><span class="p">)</span><span class="p">{</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">sum</span>  <span class="o">=</span> <span class="n">sum</span> <span class="o">-</span> <span class="n">sum</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="p">(</span><span class="n">dc</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="mi">100</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="c题1358-number-of-substrings-containing-all-three-charactershttpsleetcodecomproblemsnumber-of-substrings-containing-all-three-characters">C题:<a href="https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/">1358. Number of Substrings Containing All Three Characters</a></h1>
<p>用前缀和计算两个位置之间<code>a</code> <code>b</code> <code>c</code>分别的数量。利用双指针，找到两个位置之间恰好三个字母刚刚满足条件的位置。用靠后的指针到字符串末尾的距离，得到当前靠前指针位置情况下的解的数量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">max_siez</span> <span class="o">=</span> <span class="mf">5e4</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
    <span class="kt">int</span> <span class="nf">numberOfSubstrings</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="p">[</span><span class="n">max_siez</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="p">}</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span>
            <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span>
            <span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">a</span><span class="sc">&#39;</span><span class="p">)</span>
                <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">b</span><span class="sc">&#39;</span><span class="p">)</span>
                <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="sa"></span><span class="sc">&#39;</span><span class="sc">c</span><span class="sc">&#39;</span><span class="p">)</span>
                <span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="o">&amp;</span><span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span><span class="p">{</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span><span class="o">+</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="o">-</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="d题1359-count-all-valid-pickup-and-delivery-optionshttpsleetcodecomproblemscount-all-valid-pickup-and-delivery-options">D题:<a href="https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/">1359. Count All Valid Pickup and Delivery Options</a></h1>
<p>数学题，排列组合。假设第$i$笔订单时有k种组合，第$i+1$笔订单显然可以看作将新的两个服务插入前i笔订单的任意一个组合中。<br>
那么$i$笔订单总共有$2i$个服务，形成的空位是$2i+1$个。将两个服务按题目要求顺序插入空位共有$(2i+2)(2i+1)/2$种可能性，因此第$i+1$笔订单的组合数为$k(2i+2)(2i+1)/2$。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">moder</span>  <span class="o">=</span> <span class="mf">1e9</span><span class="o">+</span><span class="mi">7</span><span class="p">;</span>
    <span class="kt">int</span> <span class="nf">countOrders</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">last</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span><span class="p">{</span>
            <span class="n">swap</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">last</span><span class="p">)</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="p">(</span><span class="n">last</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">tmp</span><span class="p">)</span><span class="o">*</span><span class="n">tmp</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">%</span> <span class="n">moder</span><span class="p">;</span>
            <span class="n">cnt</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">ans</span> <span class="o">%</span> <span class="n">moder</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 176 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-176/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-176/</guid>
                <pubDate>Mon, 17 Feb 2020 00:50:51 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>A、B题很简单，C、D血崩。C题贪心，D题构造</p>
<h1 id="a题-1351-count-negative-numbers-in-a-sorted-matrixhttpsleetcodecomproblemscount-negative-numbers-in-a-sorted-matrix">A题: <a href="https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/">1351. Count Negative Numbers in a Sorted Matrix</a></h1>
<p>数据很小，暴力直接遍历数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">countNegatives</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">grid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">grid</span><span class="p">)</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">j</span><span class="p">:</span><span class="n">i</span><span class="p">)</span>
                <span class="k">if</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="n">ans</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="b题-1352-product-of-the-last-k-numbershttpsleetcodecomproblemsproduct-of-the-last-k-numbers">B题: <a href="https://leetcode.com/problems/product-of-the-last-k-numbers/">1352. Product of the Last K Numbers</a></h1>
<p>因为查询保证了在int范围内，也就是说连乘的长度一定有限，直接暴力累乘即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">ProductOfNumbers</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">;</span>
    <span class="n">ProductOfNumbers</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span><span class="p">}</span>

    <span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">getProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">ans</span><span class="o">*</span><span class="o">=</span><span class="n">list</span><span class="p">[</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="c题-1353-maximum-number-of-events-that-can-be-attendedhttpsleetcodecomproblemsmaximum-number-of-events-that-can-be-attended">C题: <a href="https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/">1353. Maximum Number of Events That Can Be Attended</a></h1>
<p>类似时间安排的问题，考虑贪心算法。通常为先考虑结束时间靠前的或是开始时间靠前的。这里因为第三个测试样例<code>[[1,4],[4,4],[2,2],[3,4],[1,1]]</code>可以发现如果先安排开始早的得不到最优，直接尝试先安排时间靠后的。<br>
关于greedy策略正确的证明可以看<a href="https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/discuss/510262/Detailed-analysisLet-me-lead-you-to-the-solution-step-by-step">这里</a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">maxEvents</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">events</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">multiset</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">tmp</span><span class="p">;</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">events</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">tmp</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="p">{</span><span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">i</span><span class="o">=</span><span class="n">tmp</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">!</span><span class="o">=</span><span class="n">tmp</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="o">&gt;</span><span class="n">second</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="o">&gt;</span><span class="n">first</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span><span class="n">day</span><span class="o">&lt;</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">day</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">visited</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="o">=</span><span class="o">=</span> <span class="n">visited</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">{</span>
                    <span class="n">visited</span><span class="p">[</span><span class="n">day</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                    <span class="n">ans</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span> 
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="d题-1354-construct-target-array-with-multiple-sumshttpsleetcodecomproblemsconstruct-target-array-with-multiple-sums">D题: <a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/">1354. Construct Target Array With Multiple Sums</a></h1>
<p>值得注意的是，每次更新的数字只能变大，所以如果有除了1之外的其他重复数字一定不正确。<br>
除此之外，最大的数字一定是最后一次更新得到的，且能得到该数字更新之前的原数字。根据这个原理可以从target尝试还原到原来的数组。<br>
运用一个优先队列更新每个数字，每次将最大的数字更新为一次<code>update</code>之前的数字，直到发现更新前的数字小于1（false）或最大值变为1（true）。</p>
<p><strong>根据评论发现，简单的这样做会通不过测试样例<code>[1,1e9]</code>，所以这里每次更新应该取mod，加快减小的速度。(TBC)</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">isPossible</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">target</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">s</span> <span class="o">=</span> <span class="n">accumulate</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">target</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="mi">0LL</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">remin</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">(</span><span class="p">)</span><span class="o">!</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="p">{</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
            <span class="n">remin</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-</span> <span class="n">t</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">t</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">t</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Statistical Inference - Probability</title>
                <link>https://hanshanglin.space/tech/statistical-inference-probability/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/statistical-inference-probability/</guid>
                <pubDate>Thu, 13 Feb 2020 11:26:28 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<h1 id="probability-space-c-b-p">Probability space ($C$, $B$, $P$)</h1>
<p>$C$: Sample sapce or set of all possible outcomes.<br>
$B$: Collection of subsets of $C$.<br>
$P$: $P(A)$ probability of event $A$.</p>
<ol>
<li>$P(A)\geq0,  \forall A \in B$</li>
<li>$P(C)=1$</li>
<li>$P(\cup^\infty_{i=1}A_i) = \sum^\infty_{i=1}P(A_i)$ (disjoint case)</li>
</ol>
<h1 id="random-variable">Random variable</h1>
<p>$X:C \to R, R$: set of real numbers.<br>
$\forall x \in R, {X \leq x}$ is an event.<br>
$F(x) = P(X\leq x)$ is cdf of $X$.</p>
<h1 id="type-of-rvs">Type of rvs</h1>
<h2 id="discrete-rvs">Discrete rvs</h2>
<p><strong>pmf</strong>: probability mass function</p>
<p>$$ p_X(x) = P(X=x), x \in D $$
$$ 0 \leq p_X(x) \leq 1, and \sum _{x\in D}p_X(x)=1 $$</p>
<h2 id="continuous-rvs">Continuous rvs</h2>
<p><strong>pdf</strong>: probability density function</p>
<p>$$
f(x)=F'(x) \<br>
f(x) \geq 0 , \int^\infty_\infty f(x)dx = 1 \<br>
F(x) = \int^x_{-\infty} f(y)dy
$$</p>
<p><strong>Transformations</strong> :</p>
<p>$Y=g(x)$ , and $g$ is one-to-one, $x = g^{-1}(y)$</p>
<p>$$f_Y(y) = f_X(g^{-1}(y)) \left| \frac{dx}{dy} \right| $$</p>
<blockquote>
<p>eg.  $f$ the pdf of $X$ is $f(x) = 2xe^{−x^2}$, $0 &lt; x &lt; \infty$, zero elsewhere, determine the pdf of $Y = X^2$</p>
</blockquote>
<p>$$
\begin{aligned}
Y &amp;= g(x) = x^2 \<br>
f_Y(y)  &amp;= f_X(\sqrt{y})\left| 2x \right| \<br>
&amp;= 2\sqrt{y}e^{−y} \frac{1}{2\sqrt y}  \ 
&amp;=e^{-y} \ 
f_Y(y)&amp;=
\left{
\begin{array}{lr}
e^{-y}    , &amp; 0 &lt; y &lt; \infty\<br>
0 , &amp;else
\end{array}
\right.
\end{aligned}
$$</p>
<h1 id="distributional-quantities">Distributional quantities</h1>
<h2 id="mean-or-expectation-of-x">Mean or expectation of $X$</h2>
<p>$$
\begin{aligned}
E(X) =
\left{
\begin{array}{lr}
\sum_xxp(x) ,&amp; if \sum \left| x \right| p(x) &lt; \infty &amp;discret\<br>
\int^\infty_{-\infty}xf(x)dx,&amp; if \int \left| x \right|f(x)dx&lt;\infty &amp; continuous
\end{array}
\right.
\end{aligned}
$$</p>
<h2 id="m-th-moments">m-th moments</h2>
<p>$$
\begin{aligned}
E(X^m) =
\left{
\begin{array}{lr}
\sum_xx^mp(x) ,&amp; if \sum \left| x \right|^m p(x) &lt; \infty &amp;discret\<br>
\int^\infty_{-\infty}x^mf(x)dx,&amp; if \int \left| x \right|^mf(x)dx&lt;\infty &amp; continuous
\end{array}
\right.
\end{aligned}
$$</p>
<h2 id="variance">Variance</h2>
<p>$$
\sigma^2 = Var(x)=E(X-E(X))^2=EX^2-(E(X))^2
$$</p>
<h2 id="moment-generating-function-mgf">Moment generating function (mgf)</h2>
<p>if $E(e^{tX})$ exists for $\left| t \right| &lt; h$,the mgf of $X$ is defined to be the function $M(t) = E(e^{tX},\left| t \right| &lt;h )$.<br>
<strong>property: $M^{(m)}(0) = E(X^m)$</strong> (can be used for mean and variance)<br>
<del>TODO: sample</del></p>
<h1 id="multivariate-distributions">Multivariate distributions</h1>
<h2 id="random-vector">Random Vector</h2>
<p>$$X=(X_1,X_2,...,X_m)^T$$</p>
<h2 id="distributions">Distributions</h2>
<h3 id="joint-cdf">Joint cdf</h3>
<p>$$F_{X_1,X_2}(x_1,x_2) = P(X_1\leq x_1,X_2\leq x_2)$$</p>
<h3 id="discrete-case-pmf">Discrete case (pmf)</h3>
<p>$$ p_{X_1,X_2}(x_1,x_2) = P(X_1 = x_1,X_2 = x_2) $$</p>
<h3 id="continuous-case-pdf">Continuous case (pdf)</h3>
<p>$$f_{X_1,X_2}(x_1,x_2) = \frac{\partial^2F_{X_1,X_2}(x_1,x_2)}{\partial{x_1}{x_2} }$$</p>
<p>$$F_{X_1,X_2}(x_1,x_2) = \int^{x_1}_{-\infty}{\int^{x_2}_{-\infty}{f_{X_1,X_2}(y_1,y_2)dy_1}dy_2}  $$</p>
<h3 id="marginals">Marginals</h3>
<p>$$F_{X_1}(x_1) = F_{X_1,X_2}(x_1,\infty)$$
$$ p_{X_1}(x_1) = \sum_{x_2}p_{X_1,X_2}(x_1,x_2) $$
$$F_{X_1}(x_1) = {\int^{\infty }_{-\infty}{f_{X_1,X_2}(x_1,x_2)}dx_2}  $$</p>
<h3 id="jacobian-of-the-transformation">Jacobian of the transformation</h3>
<p>$$
J = 
\left| 
\begin{matrix}
{\frac{\partial x_1}{\partial y_1}}&amp;{\frac{\partial x_1}{\partial y_2}} \<br>
{\frac{\partial x_2}{\partial y_1}}&amp;{\frac{\partial x_2}{\partial y_2}}
\end{matrix}
\right| 
$$</p>
<p>$$
F_{Y_1,Y_2}(y_1,y_2) = f_{X_1,X_2}(w_1(y_1,y_2),w_2(y_1,y_2))\left| J \right| 
$$</p>
<h3 id="expectation">Expectation</h3>
<p>Let $Y = g(X_1,X_2)$</p>
<p>$$
\begin{aligned}
E(Y)=\left{
\begin{array}{lr}
\sum_{x_1}\sum_{x_2}g(x_1,x_2)p(x_1,x_2), &amp;discrete \<br>
\int^{\infty}_{-\infty}{\int^{\infty}_{-\infty}{g(x_1,x_2)f(x_1,x_2)}dx_1 }dx_2 , &amp;continuous
\end{array}
\right.
\end{aligned}
$$
$$
Cov(X_1,X_2) = E\left[{X_1-E(X_1)}{X_2-E(X_2)} \right] = E(X_1X_2)-E(X_1)E(X_2)
$$</p>
<p><strong>Correlation coefficient</strong>:</p>
<p>$$\rho = \frac{Cov(X_1,X_2)}{\sigma_1 \sigma_2}  $$</p>
<h3 id="conditional-distributions">Conditional distributions</h3>
<p>pmf: $p_{X_2|X_1}(x_1,x_2|x_1)=\frac{p_{X_1,X_2}(x_1,x_2)}{p_{X_1}(x_1)}$<br>
pdf: $f_{X_2|X_1}(x_1,x_2|x_1)=\frac{f_{X_1,X_2}(x_1,x_2)}{f_{X_1}(x_1)}$</p>
<h3 id="independence">Independence</h3>
<p>$X_1$ and $X_2$ are said to be mutually independent</p>
<p>$$
\begin{aligned}
\Leftrightarrow\left{
\begin{array}{lr}
p_{X_1,X_2}(x_1,x_2) = p_{X_1}(x_1) p_{X_2}(x_2), &amp;discrete \<br>
f_{X_1,X_2}(x_1,x_2) = f_{X_1}(x_1) f_{X_2}(x_2), &amp;continuous
\end{array}
\right.
\end{aligned}
$$</p>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E8%A6%81%E6%AD%BB%E4%BA%86%E7%9A%84%E6%95%B0%E5%AD%A6/">要死了的数学</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%B8%A5%E8%B0%A8%E8%AE%A4%E7%9C%9F/">严谨认真</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 174 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-174/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-174/</guid>
                <pubDate>Mon, 10 Feb 2020 16:30:22 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>A、B题水题，C题Tree+DFS结果TLE了一发，D题跳跃游戏动态规划。</p>
<h1 id="a题-1337-the-k-weakest-rows-in-a-matrixhttpsleetcodecomproblemsthe-k-weakest-rows-in-a-matrix">A题: <a href="https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/">1337. The K Weakest Rows in a Matrix</a></h1>
<p>按照题意，我们需要找到最弱小的K行，而弱小的比较方式就是每行的和。因此先对每行求和，再利用<code>set</code>将行按照和从小到大排序，最后输出前k个。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">kWeakestRows</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">mat</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">set</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">mat</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="k">auto</span> <span class="n">row</span> <span class="o">=</span> <span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
            <span class="n">res</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">accumulate</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">row</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">head</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">head</span><span class="o">-</span><span class="o">&gt;</span><span class="n">second</span><span class="p">)</span><span class="p">;</span>
            <span class="n">head</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="b题-1338-reduce-array-size-to-the-halfhttpsleetcodecomcontestweekly-contest-174problemsreduce-array-size-to-the-half">B题: <a href="https://leetcode.com/contest/weekly-contest-174/problems/reduce-array-size-to-the-half/">1338. Reduce Array Size to The Half</a></h1>
<p>通过不断地删除为n的数据，将数组的大小减少到原来的一半。数组中数字的范围是1e5，可以先开一个数组统计各个数字出现的次数，然后由大到小逐个删除，直到数组的大小是之前的一半。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">minSetSize</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">r</span><span class="p">(</span><span class="mf">1e5</span><span class="o">+</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span><span class="p">:</span><span class="n">arr</span><span class="p">)</span><span class="p">{</span>
            <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="o">+</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mf">1e5</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="n">reverse</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="nl">i</span><span class="p">:</span> <span class="n">res</span><span class="p">)</span><span class="p">{</span>
            <span class="n">ans</span> <span class="o">+</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">cur</span> <span class="o">+</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">&gt;</span><span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="c题-1339-maximum-product-of-splitted-binary-treehttpsleetcodecomcontestweekly-contest-174problemsmaximum-product-of-splitted-binary-tree">C题: <a href="https://leetcode.com/contest/weekly-contest-174/problems/maximum-product-of-splitted-binary-tree/">1339. Maximum Product of Splitted Binary Tree</a></h1>
<p>给定一个<code>root</code>，可以获得它所有节点的和，同时也可以获得它之下的一个子树和。因为整棵树的和是一定的，因此得到一颗子树的和就可以计算这颗子树和剩下部分的和的乘积。dfs的遍历所有节点，更新最大乘积即可。<strong>注意在dfs一个节点时，可以返回它的和，避免重复运算（会TLE）。</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">moder</span> <span class="o">=</span> <span class="mf">1e9</span><span class="o">+</span><span class="mi">7</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="kt">int</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span><span class="o">&amp;</span> <span class="n">rt</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">rt</span> <span class="o">=</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="n">subsum</span> <span class="o">=</span> <span class="n">rt</span><span class="o">-</span><span class="o">&gt;</span><span class="n">val</span><span class="o">+</span><span class="n">dfs</span><span class="p">(</span><span class="n">rt</span><span class="o">-</span><span class="o">&gt;</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="n">dfs</span><span class="p">(</span><span class="n">rt</span><span class="o">-</span><span class="o">&gt;</span><span class="n">right</span><span class="p">)</span><span class="p">;</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="p">(</span><span class="n">sum</span><span class="o">-</span><span class="n">subsum</span><span class="p">)</span><span class="o">*</span><span class="n">subsum</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">subsum</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">maxProduct</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span><span class="p">;</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">%</span><span class="n">moder</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="d题-1340-jump-game-vhttpsleetcodecomcontestweekly-contest-174problemsjump-game-v">D题: <a href="https://leetcode.com/contest/weekly-contest-174/problems/jump-game-v/">1340. Jump Game V</a></h1>
<p>记忆化dp，小人只能从高往低跳，中间不能有过高的障碍且幅度不超过<code>d</code>。令<code>dp[i]</code>为在位置i时的最大跳跃次数，状态转移方程就是：</p>
<p>$$dp[i] = max(dp[i+x]+1,dp[i]) $$</p>
<p>其中$abs(x) &lt;= d$，且从<code>i</code>到<code>i+x</code>中高度都低于位置<code>i</code>。对所有的位置搜索一次，找到最大值并返回就好。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">v</span><span class="p">[</span><span class="mi">1005</span><span class="p">]</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="nf">dp</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cur</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">)</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">!</span><span class="o">=</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">;</span>
        <span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">cur</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">cur</span><span class="o">+</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">,</span><span class="n">dp</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="n">cur</span><span class="o">-</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">i</span><span class="o">&gt;</span><span class="o">=</span><span class="mi">0</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="o">&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span><span class="n">i</span><span class="o">-</span><span class="o">-</span><span class="p">)</span>
            <span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">,</span><span class="n">dp</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">v</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
    
    
    <span class="kt">int</span> <span class="nf">maxJumps</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">dp</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Leetcode 173 题解</title>
                <link>https://hanshanglin.space/tech/leetcode-173/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/leetcode-173/</guid>
                <pubDate>Wed, 05 Feb 2020 18:22:01 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>周赛173难度不大，A题坑爹。整场比赛涉及脑筋急转弯、DP、最短路和模拟。</p>
<h1 id="a题-1332-remove-palindromic-subsequenceshttpsleetcodecomproblemsremove-palindromic-subsequences">A题: <a href="https://leetcode.com/problems/remove-palindromic-subsequences/">1332. Remove Palindromic Subsequences</a></h1>
<p>一个只包含<code>'a'</code>,<code>'b'</code>的字符串<code>s</code>，每次删掉一个回文子串，多少次删完。题面很复杂，但值得注意的是只有<code>a</code>和<code>b</code>两个字母，而只含一种字母的字符串一定是回文序列。所以任何一个<code>s</code>，最多删除两次（一次删除<code>a</code>，一次删除<code>b</code>）就可以了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">removePalindromeSub</span><span class="p">(</span> <span class="n">string</span> <span class="n">s</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span><span class="p">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span> <span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!</span><span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="p">]</span> <span class="p">)</span>
                <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="b题-1333-filter-restaurants-by-vegan-friendly-price-and-distancehttpsleetcodecomproblemsfilter-restaurants-by-vegan-friendly-price-and-distance">B题: <a href="https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/">1333. Filter Restaurants by Vegan-Friendly, Price and Distance</a></h1>
<p>按照题目先筛选再用<code>rating</code>排序就好了。<br>
<em>根据<a href="https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/discuss/498207/C%2B%2B-Clean-solution-using-pair-and-set">这个discuss</a>的做法，用set来排序可以省下自己写cmp。</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">filterRestaurants</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">restaurants</span><span class="p">,</span> <span class="kt">int</span> <span class="n">veganFriendly</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxPrice</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxDistance</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">set</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">ele</span><span class="p">:</span><span class="n">restaurants</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">veganFriendly</span><span class="o">=</span><span class="o">=</span><span class="mi">1</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">ele</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">ele</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">&lt;</span><span class="o">=</span><span class="n">maxPrice</span> <span class="o">&amp;</span><span class="o">&amp;</span> <span class="n">ele</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">&lt;</span><span class="o">=</span><span class="n">maxDistance</span><span class="p">)</span>
                <span class="n">res</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">-</span><span class="n">ele</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="o">-</span><span class="n">ele</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">!</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">end</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="o">&gt;</span><span class="n">second</span><span class="p">)</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="c题-1334-find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distancehttpsleetcodecomproblemsfind-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance">C题: <a href="https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/">1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance</a></h1>
<p>求出两个城市之间的最短路（我用了Floyd），按阈值筛选一下，最后算一下城市数目按要求排序输出。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>

    <span class="kt">int</span> <span class="n">findTheCity</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">edges</span><span class="p">,</span> <span class="kt">int</span> <span class="n">distanceThreshold</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">dis</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mf">1e4</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">smallest</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
        <span class="c1">// floyd
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">e</span> <span class="p">:</span> <span class="n">edges</span><span class="p">)</span>
            <span class="n">dis</span><span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span><span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span> <span class="o">=</span> <span class="n">dis</span><span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">+</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
            <span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">+</span><span class="o">+</span><span class="n">k</span><span class="p">)</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">+</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">+</span><span class="o">+</span><span class="n">j</span><span class="p">)</span>
                    <span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">,</span> <span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">dis</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
        <span class="c1">// solve
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">+</span><span class="o">+</span><span class="n">j</span><span class="p">)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span><span class="o">=</span> <span class="n">distanceThreshold</span><span class="p">)</span>
                    <span class="o">+</span><span class="o">+</span><span class="n">count</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;</span><span class="o">=</span> <span class="n">smallest</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="n">smallest</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="d题-1335-minimum-difficulty-of-a-job-schedulehttpsleetcodecomproblemsminimum-difficulty-of-a-job-schedule">D题: <a href="https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/">1335. Minimum Difficulty of a Job Schedule</a></h1>
<p>DP题，用一个矩阵<code>maxn</code>， <code>maxn[x][y]</code>是x个和第y个job中<code>difficulty</code>最大值。 <code>dp[i][j]</code>代表把前<code>i</code>个<code>job</code>分成<code>j</code>天的最优情况。<br>
状态转移方程为</p>
<p>$$dp[i][j]=min ({dp[k][j-1]+maxn[k+1][j]})  |  k = [0...(i-1)]$$</p>
<p>这道题应该有更好的<a href="https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/discuss/495000/C%2B%2B-0ms!-O(d*n)-time-O(n)-space.-DP-%2B-MonotonicMinimum-Stack!">解法</a>。<br>
这里的代码复杂度应该是$O(n^2*d)$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">minDifficulty</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="o">&amp;</span> <span class="n">job</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">job</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;</span><span class="n">d</span><span class="p">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">maxn</span><span class="p">[</span><span class="mi">305</span><span class="p">]</span><span class="p">[</span><span class="mi">305</span><span class="p">]</span><span class="p">;</span>
        <span class="c1">// maxn[a][b] the max from a to b
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">maxn</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">job</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="n">maxn</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">maxn</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span><span class="n">job</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>        
        <span class="c1">//dp
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="mi">300</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="p">[</span><span class="mi">10</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">maxn</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">d</span><span class="p">;</span><span class="n">j</span><span class="o">+</span><span class="o">+</span><span class="p">)</span><span class="p">{</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">INT_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&gt;</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">-</span><span class="o">-</span><span class="p">)</span><span class="p">{</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="p">,</span><span class="n">dp</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">maxn</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="p">)</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">[</span><span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/leetcode/">leetcode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%BC%91%E9%97%B2%E5%A8%B1%E4%B9%90/">休闲娱乐</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Python从入门到放弃</title>
                <link>https://hanshanglin.space/tech/python-guide/</link>
                <guid isPermaLink="true">https://hanshanglin.space/tech/python-guide/</guid>
                <pubDate>Sat, 13 Jul 2019 11:26:28 +0800</pubDate>
                
                    <author>hanshanglin2017@gmail.com (HAN Shanglin)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description><![CDATA[<p>这篇文章适用于：时间太多不知道干什么的人、不了解编程想学python的人、看别人都学自己也要学的人。</p>
<h2 id="关于怎么学习编程语言">关于怎么学习编程语言</h2>
<p>姑且将需要学习编程的人分成两类，有其他编程语言基础的人和没有任何编程基础的人。两类人的学习方法也有着巨大的差异。</p>
<h3 id="对于有编程基础的人">对于有编程基础的人</h3>
<p><del>都有基础了干嘛听我在这废话</del></p>
<p>因为有过一定的编程基础的人，大多数已经有如何<strong>用计算机解决一个实际问题</strong>的思路。在各种概念和积累较为充分的情况下，应该从新语言的语法和特性入手，通过<strong>直接实践</strong>快速了解相应的语法结构和常见库，在这之后<code>面向搜索引擎编程</code>，借助搜索引擎和文档快速将新语言投入生产。</p>
<h3 id="对于没有编程经验的人">对于没有编程经验的人</h3>
<p>对于没有编程经验的人，请首先记住<em>绝大多数情况下编程语言只是工具</em>，<del>除了闲的实在无聊的人</del> 没有必要为了学而学，应该更多关注在怎么用工具解决问题上。这里主要有两个挑战:</p>
<ol>
<li>首先是<strong>用计算机解决问题的思路</strong>。我们要知道什么是计算机擅长的，什么是计算机不擅长甚至无法完成的。<br>
<code>一言以蔽之，人类越擅长的（视觉，听觉和想象力等）计算机往往越不擅长。相反，大多数人类不擅长的（记忆、计算和重复劳动等）很可能是计算机的强项。</code><br>
在知道计算机擅长什么之后，程序猿需要将现实问题抽象成一个方便计算机解决的问题。这是一个需要经验的环节，每年有无数人步入OI/ACM的坟墓，就是倒在如何正确的抽象转化问题上。习得这个技能的方法很简单，<strong>多看多练</strong>。这里给一个转化问题的示例，细品：</li>
</ol>
<blockquote>
<p>从前有一个憨憨农夫，带着一颗大白菜、一只傻狼和一只笨羊。现在他们要过河，而河边只有一艘船，船上只能同时坐两个人/物，只有农夫会划船。显然只能让农夫每次带一样东西过河。而当农夫不在的时候，狼会吃羊，羊会吃菜。那么问题是怎么样的策略可以让农夫一群成功过河...<br>
显然我们直接想象的话可以很容易得到答案，但问题在于怎么让计算机给我们一个正确答案。</p>
</blockquote>
<ol start="2">
<li>其次则是<strong>将这个思路编写成程序的能力</strong>。这个某种意义上是大多数软文、网课所讲的<em>学编程</em>。在这里我们可能需要真的选择一门编程语言并持续学习。个人会推荐选一门解释型语言（interpreted）比如<code>Python</code>，或是一门函数式语言（functional）比如<code>Racket</code>。当然考虑到大多数人的想法，可能<code>Python</code>更加合适...<br>
因为<code>Python</code>、<code>C++</code>这种刚入门就接触到的语言大多都是多<a href="https://en.wikipedia.org/wiki/Programming_paradigm">范式</a>的，也就是很多编程理念都会在一个语言中有所应用，所以在接触并理解了不同的理念后上手其他语言就会容易很多。</li>
</ol>
<h2 id="关于python">关于Python</h2>
<h3 id="python-适合干什么">Python 适合干什么</h3>
<p>首先Python是一门<a href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%A487/4634934?fr=aladdin">图灵完备</a>的编程语言，理论上它完成所有<strong>可以计算解决</strong>的问题。只是术业有专攻，Python在各个领域的<strong>工作效率</strong>是不同的，Python在进行大规模运算的效率会比较低（不考虑<a href="https://en.wikipedia.org/wiki/Dynamic-link_library">动态链接库</a>）和对多线程的支持不是很好（<del>很多人不会接触到</del>）。所以不需要担心进了这个坑发现什么都干不了的情况。<br>
对于没有时间系统学习编程的人，python可能比较适合用于：<a href="https://github.com/Oliver0047/Concert_Ticket">演唱会抢票</a>、<a href="https://github.com/Lewin671/YourLesson">自动选课</a>
、<a href="https://github.com/facert/awesome-spider">网络爬虫</a>和<a href="https://github.com/kunkun1230/python-for-data-analysis">数据分析</a>等。当然要实现这些功能，可能仅仅知道怎么写Python是远远不够的，还需要相应的数学知识和网络通讯知识。</p>
<h3 id="关于这个教程">关于这个教程</h3>
<h4 id="为什么只有学习路线没有实际教程">为什么只有学习路线没有实际教程</h4>
<p>因为网络上Python的学习资源数不胜数，自认也不能和很多前辈的内容相媲美，整理的路线更多的以<code>如何迅速起步</code>，<code>如何自己解决学习中遇到的问题</code>为主，意在减少被问<code>能不能帮我看看这块有什么问题</code>的次数。一步一步的教程会有但需要时间，着急的同学可以直接用网上的资源，对照学习路线学习。如果坚持不到第十二项建议去寻找对自己更有意义的事情。</p>
<h4 id="网络上高质量的学习教程">网络上高质量的学习教程</h4>
<p>这里推荐<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰的Python教程</a>和业内出名的动物书系列中的<a href="http://www.oreilly.com.cn/index.php?func=book&amp;isbn=978-7-111-32653-3">老鼠书</a>。<br>
但因为这些教程往往过于全面，可能并不能最快速的帮助所有人迅速上手Python。因此可以按照我下面的建议，了解完需要的基本知识后，直接运用Python去做自己想干的事情，直到遇到问题<del>或闲着无聊</del>的时候在回头把这些教程当作工具书读。<br>
除了上述两个资源外，最重要的是谷歌和<a href="https://docs.python.org/3/reference/">官方文档</a>。在这两个地方可以找到<strong>所有</strong>可能会遇到的问题的解答。</p>
<h3 id="建议的学习顺序">建议的学习顺序</h3>
<p>下面的学习顺序是经过几个人讨论之后得到的，该顺序从应用的角度功利帮助大家快速学习了解Python。可以按照顺序在自己心仪的学习资源中找到相应的课程进行学习。<del>如果不太监的话</del>后续也会有教程按照如下的顺序更新。</p>
<ol>
<li>Python文件结构<br>
<strong>见下文</strong></li>
<li>Python的安装</li>
<li>如何在搜索引擎中搜索代码报错并找到相应答案</li>
<li>如何进行输入输出</li>
<li>什么是变量</li>
<li>顺序结构与循环与选择</li>
<li>函数的概念</li>
<li>文件读写</li>
<li>list\dict\set的简单应用</li>
<li>切片</li>
<li>字符串与编码知识</li>
<li>如何编写自己的函数<br>
<strong>学到这里就可以开始尝试自己写一些有意义的东西了，预计用时1.5h</strong></li>
<li>如何进行断点调试<br>
<strong>极为重要，减少90%的问题</strong></li>
<li>库与第三方库</li>
<li>【可选】包管理工具<code>Anaconda</code>的使用</li>
<li>【可选】<code>Jupyter Notebook</code>的使用</li>
<li>【可选】常见的数据处理库<code>numpy</code> <code>pandas</code>的简单应用</li>
<li>【可选】常见的画图库<code>matplotlib</code> <code>seaborn</code>的简单应用</li>
<li>tuple的简单应用与解包</li>
<li>enumerate的简单应用</li>
<li>生成器与迭代器</li>
<li>什么是高阶函数与常用的三件套(<code>map</code> <code>reduce</code> <code>filter</code>)</li>
<li>什么是lambda函数</li>
<li>类的概念</li>
<li>【可选】常见的机器学习库与深度学习框架<code>sklearn</code> <code>pytorch</code>的简单应用</li>
<li>装饰器</li>
<li>错误处理</li>
<li>正则表达式</li>
<li>...<br>
<strong>后面还需要什么内容。。其实学到这里应该自己心理有数了。。</strong></li>
</ol>
<h3 id="关于python的文件结构">关于Python的文件结构</h3>
<p>所有的python代码都会存储在<code>.py</code>结尾的文件中，而了解这个文件的结构是很重要的一部分。暂时先不需要完整的搞清楚每个部分的作用，只需要看一遍留有印象就好。建议先阅读下面的内容，在有了一点整体印象后，再去上手学习具体的Python知识。<br>
那下面让我们用一份智能问答机器人代码为例，概括的说一下常见的Python文件里面的结构。<br>
<em>所有的解释都以 <code>#E:</code>开头</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/env python3</span>
<span class="c1">#E: 这一行叫做Shebang,有兴趣可以搜索了解，无兴趣可忽略作用，但建议保留在自己所有的python文件中</span>
<span class="c1"># -*- coding: UTF-8 -*-</span>
<span class="c1">#E: 这一行用于指定字符形式，在了解到一定的编码知识后会理解，可以无脑的直接保留</span>
<span class="kn">import</span> <span class="nn">logging</span>
<span class="c1">#E: 这里导入了一个叫做os的库，它包含了一些官方定义好的功能</span>

<span class="k">def</span> <span class="nf">use_logging</span><span class="p">(</span><span class="n">func</span><span class="p">)</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="p">)</span><span class="p">:</span>
        <span class="n">logging</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="sa"></span><span class="s2">&#34;</span><span class="si">%s</span><span class="s2"> is running</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="c1">#E: 下一行以@开头的内容叫做装饰器，等遇到的时候再搜索了解就好了</span>
<span class="nd">@use_logging</span>
<span class="k">def</span> <span class="nf">smart_response</span><span class="p">(</span><span class="n">question</span><span class="p">)</span><span class="p">:</span>
<span class="c1">#E: 这里使用def定义了一个函数，接受一个变量并以question命名</span>
    <span class="k">return</span> <span class="n">question</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">吗</span><span class="s1">&#39;</span><span class="p">,</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">&#39;</span><span class="p">)</span>\
        <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">？</span><span class="s1">&#39;</span><span class="p">,</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">！</span><span class="s1">&#39;</span><span class="p">)</span>\
            <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">?</span><span class="s1">&#39;</span><span class="p">,</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">!</span><span class="s1">&#39;</span><span class="p">)</span>\
                <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">你</span><span class="s1">&#39;</span><span class="p">,</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">我</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#E: return 后面用作函数的返回值</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="sa"></span><span class="s2">&#34;</span><span class="s2">__main__</span><span class="s2">&#34;</span><span class="p">:</span>
<span class="c1">#E: 这一行的作用是作为整个程序的入口，在学习完类和库的概念之后会理解，现在只需要记得将代码写在这时候就好</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">q</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="sa"></span><span class="s2">&#34;</span><span class="s2">you:</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa"></span><span class="s2">&#34;</span><span class="s2">ai:</span><span class="s2">&#34;</span><span class="o">+</span><span class="n">smart_response</span><span class="p">(</span><span class="n">q</span><span class="p">)</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><hr>]]></description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://hanshanglin.space/tech/">tech</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E6%86%A8%E6%86%A8%E6%8C%87%E5%8C%97/">憨憨指北</category>
                                
                            
                                
                                
                                
                                    <category domain="https://hanshanglin.space/tags/%E4%B8%A5%E8%B0%A8%E8%AE%A4%E7%9C%9F/">严谨认真</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>